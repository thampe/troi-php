<?php
/**
 * ApiAbsenceType
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Troi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Troi API
 *
 * This is the official API documentation of Troi.  # Authentication  Troi offers basic auth for authentication.  <security-definitions />
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: helpdesk@troi.de
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Troi\Model;

use \ArrayAccess;
use \Troi\ObjectSerializer;

/**
 * ApiAbsenceType Class Doc Comment
 *
 * @category Class
 * @package  Troi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ApiAbsenceType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ApiAbsenceType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'absence_type_id' => 'int',
        'absence_type_description' => 'string',
        'absence_type_abbrevation' => 'string',
        'absence_type_color' => 'string',
        'absence_type_allowed' => 'bool',
        'absence_type_system' => 'bool',
        'absence_type_freeday' => 'bool',
        'absence_type_freeday_ignore' => 'bool',
        'absence_type_business_trip' => 'bool',
        'absence_type_icon' => 'string',
        'absence_type_holiday' => 'bool',
        'absence_type_ill' => 'bool',
        'absence_type_work_time' => 'bool',
        'absence_type_allow_resource_calculation' => 'bool',
        'absence_type_allow_travel_cost_recording' => 'bool',
        'absence_type_background_color' => 'string',
        'absence_type_is_anonymous' => 'bool',
        'absence_type_is_active' => 'bool',
        'absence_type_company_shutdown' => 'bool',
        'absence_type_count_to_project_balance' => 'bool',
        'class_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'absence_type_id' => null,
        'absence_type_description' => null,
        'absence_type_abbrevation' => null,
        'absence_type_color' => null,
        'absence_type_allowed' => null,
        'absence_type_system' => null,
        'absence_type_freeday' => null,
        'absence_type_freeday_ignore' => null,
        'absence_type_business_trip' => null,
        'absence_type_icon' => null,
        'absence_type_holiday' => null,
        'absence_type_ill' => null,
        'absence_type_work_time' => null,
        'absence_type_allow_resource_calculation' => null,
        'absence_type_allow_travel_cost_recording' => null,
        'absence_type_background_color' => null,
        'absence_type_is_anonymous' => null,
        'absence_type_is_active' => null,
        'absence_type_company_shutdown' => null,
        'absence_type_count_to_project_balance' => null,
        'class_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'absence_type_id' => false,
        'absence_type_description' => false,
        'absence_type_abbrevation' => false,
        'absence_type_color' => false,
        'absence_type_allowed' => false,
        'absence_type_system' => false,
        'absence_type_freeday' => false,
        'absence_type_freeday_ignore' => false,
        'absence_type_business_trip' => false,
        'absence_type_icon' => false,
        'absence_type_holiday' => false,
        'absence_type_ill' => false,
        'absence_type_work_time' => false,
        'absence_type_allow_resource_calculation' => false,
        'absence_type_allow_travel_cost_recording' => false,
        'absence_type_background_color' => false,
        'absence_type_is_anonymous' => false,
        'absence_type_is_active' => false,
        'absence_type_company_shutdown' => false,
        'absence_type_count_to_project_balance' => false,
        'class_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'absence_type_id' => 'absenceTypeId',
        'absence_type_description' => 'absenceTypeDescription',
        'absence_type_abbrevation' => 'absenceTypeAbbrevation',
        'absence_type_color' => 'absenceTypeColor',
        'absence_type_allowed' => 'absenceTypeAllowed',
        'absence_type_system' => 'absenceTypeSystem',
        'absence_type_freeday' => 'absenceTypeFreeday',
        'absence_type_freeday_ignore' => 'absenceTypeFreedayIgnore',
        'absence_type_business_trip' => 'absenceTypeBusinessTrip',
        'absence_type_icon' => 'absenceTypeIcon',
        'absence_type_holiday' => 'absenceTypeHoliday',
        'absence_type_ill' => 'absenceTypeIll',
        'absence_type_work_time' => 'absenceTypeWorkTime',
        'absence_type_allow_resource_calculation' => 'absenceTypeAllowResourceCalculation',
        'absence_type_allow_travel_cost_recording' => 'absenceTypeAllowTravelCostRecording',
        'absence_type_background_color' => 'absenceTypeBackgroundColor',
        'absence_type_is_anonymous' => 'absenceTypeIsAnonymous',
        'absence_type_is_active' => 'absenceTypeIsActive',
        'absence_type_company_shutdown' => 'absenceTypeCompanyShutdown',
        'absence_type_count_to_project_balance' => 'absenceTypeCountToProjectBalance',
        'class_name' => 'ClassName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'absence_type_id' => 'setAbsenceTypeId',
        'absence_type_description' => 'setAbsenceTypeDescription',
        'absence_type_abbrevation' => 'setAbsenceTypeAbbrevation',
        'absence_type_color' => 'setAbsenceTypeColor',
        'absence_type_allowed' => 'setAbsenceTypeAllowed',
        'absence_type_system' => 'setAbsenceTypeSystem',
        'absence_type_freeday' => 'setAbsenceTypeFreeday',
        'absence_type_freeday_ignore' => 'setAbsenceTypeFreedayIgnore',
        'absence_type_business_trip' => 'setAbsenceTypeBusinessTrip',
        'absence_type_icon' => 'setAbsenceTypeIcon',
        'absence_type_holiday' => 'setAbsenceTypeHoliday',
        'absence_type_ill' => 'setAbsenceTypeIll',
        'absence_type_work_time' => 'setAbsenceTypeWorkTime',
        'absence_type_allow_resource_calculation' => 'setAbsenceTypeAllowResourceCalculation',
        'absence_type_allow_travel_cost_recording' => 'setAbsenceTypeAllowTravelCostRecording',
        'absence_type_background_color' => 'setAbsenceTypeBackgroundColor',
        'absence_type_is_anonymous' => 'setAbsenceTypeIsAnonymous',
        'absence_type_is_active' => 'setAbsenceTypeIsActive',
        'absence_type_company_shutdown' => 'setAbsenceTypeCompanyShutdown',
        'absence_type_count_to_project_balance' => 'setAbsenceTypeCountToProjectBalance',
        'class_name' => 'setClassName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'absence_type_id' => 'getAbsenceTypeId',
        'absence_type_description' => 'getAbsenceTypeDescription',
        'absence_type_abbrevation' => 'getAbsenceTypeAbbrevation',
        'absence_type_color' => 'getAbsenceTypeColor',
        'absence_type_allowed' => 'getAbsenceTypeAllowed',
        'absence_type_system' => 'getAbsenceTypeSystem',
        'absence_type_freeday' => 'getAbsenceTypeFreeday',
        'absence_type_freeday_ignore' => 'getAbsenceTypeFreedayIgnore',
        'absence_type_business_trip' => 'getAbsenceTypeBusinessTrip',
        'absence_type_icon' => 'getAbsenceTypeIcon',
        'absence_type_holiday' => 'getAbsenceTypeHoliday',
        'absence_type_ill' => 'getAbsenceTypeIll',
        'absence_type_work_time' => 'getAbsenceTypeWorkTime',
        'absence_type_allow_resource_calculation' => 'getAbsenceTypeAllowResourceCalculation',
        'absence_type_allow_travel_cost_recording' => 'getAbsenceTypeAllowTravelCostRecording',
        'absence_type_background_color' => 'getAbsenceTypeBackgroundColor',
        'absence_type_is_anonymous' => 'getAbsenceTypeIsAnonymous',
        'absence_type_is_active' => 'getAbsenceTypeIsActive',
        'absence_type_company_shutdown' => 'getAbsenceTypeCompanyShutdown',
        'absence_type_count_to_project_balance' => 'getAbsenceTypeCountToProjectBalance',
        'class_name' => 'getClassName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('absence_type_id', $data ?? [], null);
        $this->setIfExists('absence_type_description', $data ?? [], null);
        $this->setIfExists('absence_type_abbrevation', $data ?? [], null);
        $this->setIfExists('absence_type_color', $data ?? [], null);
        $this->setIfExists('absence_type_allowed', $data ?? [], null);
        $this->setIfExists('absence_type_system', $data ?? [], null);
        $this->setIfExists('absence_type_freeday', $data ?? [], null);
        $this->setIfExists('absence_type_freeday_ignore', $data ?? [], null);
        $this->setIfExists('absence_type_business_trip', $data ?? [], null);
        $this->setIfExists('absence_type_icon', $data ?? [], null);
        $this->setIfExists('absence_type_holiday', $data ?? [], null);
        $this->setIfExists('absence_type_ill', $data ?? [], null);
        $this->setIfExists('absence_type_work_time', $data ?? [], null);
        $this->setIfExists('absence_type_allow_resource_calculation', $data ?? [], null);
        $this->setIfExists('absence_type_allow_travel_cost_recording', $data ?? [], null);
        $this->setIfExists('absence_type_background_color', $data ?? [], null);
        $this->setIfExists('absence_type_is_anonymous', $data ?? [], null);
        $this->setIfExists('absence_type_is_active', $data ?? [], null);
        $this->setIfExists('absence_type_company_shutdown', $data ?? [], null);
        $this->setIfExists('absence_type_count_to_project_balance', $data ?? [], null);
        $this->setIfExists('class_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets absence_type_id
     *
     * @return int|null
     */
    public function getAbsenceTypeId()
    {
        return $this->container['absence_type_id'];
    }

    /**
     * Sets absence_type_id
     *
     * @param int|null $absence_type_id absence_type_id
     *
     * @return self
     */
    public function setAbsenceTypeId($absence_type_id)
    {
        if (is_null($absence_type_id)) {
            throw new \InvalidArgumentException('non-nullable absence_type_id cannot be null');
        }
        $this->container['absence_type_id'] = $absence_type_id;

        return $this;
    }

    /**
     * Gets absence_type_description
     *
     * @return string|null
     */
    public function getAbsenceTypeDescription()
    {
        return $this->container['absence_type_description'];
    }

    /**
     * Sets absence_type_description
     *
     * @param string|null $absence_type_description absence_type_description
     *
     * @return self
     */
    public function setAbsenceTypeDescription($absence_type_description)
    {
        if (is_null($absence_type_description)) {
            throw new \InvalidArgumentException('non-nullable absence_type_description cannot be null');
        }
        $this->container['absence_type_description'] = $absence_type_description;

        return $this;
    }

    /**
     * Gets absence_type_abbrevation
     *
     * @return string|null
     */
    public function getAbsenceTypeAbbrevation()
    {
        return $this->container['absence_type_abbrevation'];
    }

    /**
     * Sets absence_type_abbrevation
     *
     * @param string|null $absence_type_abbrevation absence_type_abbrevation
     *
     * @return self
     */
    public function setAbsenceTypeAbbrevation($absence_type_abbrevation)
    {
        if (is_null($absence_type_abbrevation)) {
            throw new \InvalidArgumentException('non-nullable absence_type_abbrevation cannot be null');
        }
        $this->container['absence_type_abbrevation'] = $absence_type_abbrevation;

        return $this;
    }

    /**
     * Gets absence_type_color
     *
     * @return string|null
     */
    public function getAbsenceTypeColor()
    {
        return $this->container['absence_type_color'];
    }

    /**
     * Sets absence_type_color
     *
     * @param string|null $absence_type_color absence_type_color
     *
     * @return self
     */
    public function setAbsenceTypeColor($absence_type_color)
    {
        if (is_null($absence_type_color)) {
            throw new \InvalidArgumentException('non-nullable absence_type_color cannot be null');
        }
        $this->container['absence_type_color'] = $absence_type_color;

        return $this;
    }

    /**
     * Gets absence_type_allowed
     *
     * @return bool|null
     */
    public function getAbsenceTypeAllowed()
    {
        return $this->container['absence_type_allowed'];
    }

    /**
     * Sets absence_type_allowed
     *
     * @param bool|null $absence_type_allowed absence_type_allowed
     *
     * @return self
     */
    public function setAbsenceTypeAllowed($absence_type_allowed)
    {
        if (is_null($absence_type_allowed)) {
            throw new \InvalidArgumentException('non-nullable absence_type_allowed cannot be null');
        }
        $this->container['absence_type_allowed'] = $absence_type_allowed;

        return $this;
    }

    /**
     * Gets absence_type_system
     *
     * @return bool|null
     */
    public function getAbsenceTypeSystem()
    {
        return $this->container['absence_type_system'];
    }

    /**
     * Sets absence_type_system
     *
     * @param bool|null $absence_type_system absence_type_system
     *
     * @return self
     */
    public function setAbsenceTypeSystem($absence_type_system)
    {
        if (is_null($absence_type_system)) {
            throw new \InvalidArgumentException('non-nullable absence_type_system cannot be null');
        }
        $this->container['absence_type_system'] = $absence_type_system;

        return $this;
    }

    /**
     * Gets absence_type_freeday
     *
     * @return bool|null
     */
    public function getAbsenceTypeFreeday()
    {
        return $this->container['absence_type_freeday'];
    }

    /**
     * Sets absence_type_freeday
     *
     * @param bool|null $absence_type_freeday absence_type_freeday
     *
     * @return self
     */
    public function setAbsenceTypeFreeday($absence_type_freeday)
    {
        if (is_null($absence_type_freeday)) {
            throw new \InvalidArgumentException('non-nullable absence_type_freeday cannot be null');
        }
        $this->container['absence_type_freeday'] = $absence_type_freeday;

        return $this;
    }

    /**
     * Gets absence_type_freeday_ignore
     *
     * @return bool|null
     */
    public function getAbsenceTypeFreedayIgnore()
    {
        return $this->container['absence_type_freeday_ignore'];
    }

    /**
     * Sets absence_type_freeday_ignore
     *
     * @param bool|null $absence_type_freeday_ignore absence_type_freeday_ignore
     *
     * @return self
     */
    public function setAbsenceTypeFreedayIgnore($absence_type_freeday_ignore)
    {
        if (is_null($absence_type_freeday_ignore)) {
            throw new \InvalidArgumentException('non-nullable absence_type_freeday_ignore cannot be null');
        }
        $this->container['absence_type_freeday_ignore'] = $absence_type_freeday_ignore;

        return $this;
    }

    /**
     * Gets absence_type_business_trip
     *
     * @return bool|null
     */
    public function getAbsenceTypeBusinessTrip()
    {
        return $this->container['absence_type_business_trip'];
    }

    /**
     * Sets absence_type_business_trip
     *
     * @param bool|null $absence_type_business_trip absence_type_business_trip
     *
     * @return self
     */
    public function setAbsenceTypeBusinessTrip($absence_type_business_trip)
    {
        if (is_null($absence_type_business_trip)) {
            throw new \InvalidArgumentException('non-nullable absence_type_business_trip cannot be null');
        }
        $this->container['absence_type_business_trip'] = $absence_type_business_trip;

        return $this;
    }

    /**
     * Gets absence_type_icon
     *
     * @return string|null
     */
    public function getAbsenceTypeIcon()
    {
        return $this->container['absence_type_icon'];
    }

    /**
     * Sets absence_type_icon
     *
     * @param string|null $absence_type_icon absence_type_icon
     *
     * @return self
     */
    public function setAbsenceTypeIcon($absence_type_icon)
    {
        if (is_null($absence_type_icon)) {
            throw new \InvalidArgumentException('non-nullable absence_type_icon cannot be null');
        }
        $this->container['absence_type_icon'] = $absence_type_icon;

        return $this;
    }

    /**
     * Gets absence_type_holiday
     *
     * @return bool|null
     */
    public function getAbsenceTypeHoliday()
    {
        return $this->container['absence_type_holiday'];
    }

    /**
     * Sets absence_type_holiday
     *
     * @param bool|null $absence_type_holiday absence_type_holiday
     *
     * @return self
     */
    public function setAbsenceTypeHoliday($absence_type_holiday)
    {
        if (is_null($absence_type_holiday)) {
            throw new \InvalidArgumentException('non-nullable absence_type_holiday cannot be null');
        }
        $this->container['absence_type_holiday'] = $absence_type_holiday;

        return $this;
    }

    /**
     * Gets absence_type_ill
     *
     * @return bool|null
     */
    public function getAbsenceTypeIll()
    {
        return $this->container['absence_type_ill'];
    }

    /**
     * Sets absence_type_ill
     *
     * @param bool|null $absence_type_ill absence_type_ill
     *
     * @return self
     */
    public function setAbsenceTypeIll($absence_type_ill)
    {
        if (is_null($absence_type_ill)) {
            throw new \InvalidArgumentException('non-nullable absence_type_ill cannot be null');
        }
        $this->container['absence_type_ill'] = $absence_type_ill;

        return $this;
    }

    /**
     * Gets absence_type_work_time
     *
     * @return bool|null
     */
    public function getAbsenceTypeWorkTime()
    {
        return $this->container['absence_type_work_time'];
    }

    /**
     * Sets absence_type_work_time
     *
     * @param bool|null $absence_type_work_time absence_type_work_time
     *
     * @return self
     */
    public function setAbsenceTypeWorkTime($absence_type_work_time)
    {
        if (is_null($absence_type_work_time)) {
            throw new \InvalidArgumentException('non-nullable absence_type_work_time cannot be null');
        }
        $this->container['absence_type_work_time'] = $absence_type_work_time;

        return $this;
    }

    /**
     * Gets absence_type_allow_resource_calculation
     *
     * @return bool|null
     */
    public function getAbsenceTypeAllowResourceCalculation()
    {
        return $this->container['absence_type_allow_resource_calculation'];
    }

    /**
     * Sets absence_type_allow_resource_calculation
     *
     * @param bool|null $absence_type_allow_resource_calculation absence_type_allow_resource_calculation
     *
     * @return self
     */
    public function setAbsenceTypeAllowResourceCalculation($absence_type_allow_resource_calculation)
    {
        if (is_null($absence_type_allow_resource_calculation)) {
            throw new \InvalidArgumentException('non-nullable absence_type_allow_resource_calculation cannot be null');
        }
        $this->container['absence_type_allow_resource_calculation'] = $absence_type_allow_resource_calculation;

        return $this;
    }

    /**
     * Gets absence_type_allow_travel_cost_recording
     *
     * @return bool|null
     */
    public function getAbsenceTypeAllowTravelCostRecording()
    {
        return $this->container['absence_type_allow_travel_cost_recording'];
    }

    /**
     * Sets absence_type_allow_travel_cost_recording
     *
     * @param bool|null $absence_type_allow_travel_cost_recording absence_type_allow_travel_cost_recording
     *
     * @return self
     */
    public function setAbsenceTypeAllowTravelCostRecording($absence_type_allow_travel_cost_recording)
    {
        if (is_null($absence_type_allow_travel_cost_recording)) {
            throw new \InvalidArgumentException('non-nullable absence_type_allow_travel_cost_recording cannot be null');
        }
        $this->container['absence_type_allow_travel_cost_recording'] = $absence_type_allow_travel_cost_recording;

        return $this;
    }

    /**
     * Gets absence_type_background_color
     *
     * @return string|null
     */
    public function getAbsenceTypeBackgroundColor()
    {
        return $this->container['absence_type_background_color'];
    }

    /**
     * Sets absence_type_background_color
     *
     * @param string|null $absence_type_background_color absence_type_background_color
     *
     * @return self
     */
    public function setAbsenceTypeBackgroundColor($absence_type_background_color)
    {
        if (is_null($absence_type_background_color)) {
            throw new \InvalidArgumentException('non-nullable absence_type_background_color cannot be null');
        }
        $this->container['absence_type_background_color'] = $absence_type_background_color;

        return $this;
    }

    /**
     * Gets absence_type_is_anonymous
     *
     * @return bool|null
     */
    public function getAbsenceTypeIsAnonymous()
    {
        return $this->container['absence_type_is_anonymous'];
    }

    /**
     * Sets absence_type_is_anonymous
     *
     * @param bool|null $absence_type_is_anonymous absence_type_is_anonymous
     *
     * @return self
     */
    public function setAbsenceTypeIsAnonymous($absence_type_is_anonymous)
    {
        if (is_null($absence_type_is_anonymous)) {
            throw new \InvalidArgumentException('non-nullable absence_type_is_anonymous cannot be null');
        }
        $this->container['absence_type_is_anonymous'] = $absence_type_is_anonymous;

        return $this;
    }

    /**
     * Gets absence_type_is_active
     *
     * @return bool|null
     */
    public function getAbsenceTypeIsActive()
    {
        return $this->container['absence_type_is_active'];
    }

    /**
     * Sets absence_type_is_active
     *
     * @param bool|null $absence_type_is_active absence_type_is_active
     *
     * @return self
     */
    public function setAbsenceTypeIsActive($absence_type_is_active)
    {
        if (is_null($absence_type_is_active)) {
            throw new \InvalidArgumentException('non-nullable absence_type_is_active cannot be null');
        }
        $this->container['absence_type_is_active'] = $absence_type_is_active;

        return $this;
    }

    /**
     * Gets absence_type_company_shutdown
     *
     * @return bool|null
     */
    public function getAbsenceTypeCompanyShutdown()
    {
        return $this->container['absence_type_company_shutdown'];
    }

    /**
     * Sets absence_type_company_shutdown
     *
     * @param bool|null $absence_type_company_shutdown absence_type_company_shutdown
     *
     * @return self
     */
    public function setAbsenceTypeCompanyShutdown($absence_type_company_shutdown)
    {
        if (is_null($absence_type_company_shutdown)) {
            throw new \InvalidArgumentException('non-nullable absence_type_company_shutdown cannot be null');
        }
        $this->container['absence_type_company_shutdown'] = $absence_type_company_shutdown;

        return $this;
    }

    /**
     * Gets absence_type_count_to_project_balance
     *
     * @return bool|null
     */
    public function getAbsenceTypeCountToProjectBalance()
    {
        return $this->container['absence_type_count_to_project_balance'];
    }

    /**
     * Sets absence_type_count_to_project_balance
     *
     * @param bool|null $absence_type_count_to_project_balance absence_type_count_to_project_balance
     *
     * @return self
     */
    public function setAbsenceTypeCountToProjectBalance($absence_type_count_to_project_balance)
    {
        if (is_null($absence_type_count_to_project_balance)) {
            throw new \InvalidArgumentException('non-nullable absence_type_count_to_project_balance cannot be null');
        }
        $this->container['absence_type_count_to_project_balance'] = $absence_type_count_to_project_balance;

        return $this;
    }

    /**
     * Gets class_name
     *
     * @return string|null
     */
    public function getClassName()
    {
        return $this->container['class_name'];
    }

    /**
     * Sets class_name
     *
     * @param string|null $class_name class_name
     *
     * @return self
     */
    public function setClassName($class_name)
    {
        if (is_null($class_name)) {
            throw new \InvalidArgumentException('non-nullable class_name cannot be null');
        }
        $this->container['class_name'] = $class_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


