<?php
/**
 * AccountsPostRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Troi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Troi API
 *
 * This is the official API documentation of Troi.  # Authentication  Troi offers basic auth for authentication.  <security-definitions />
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: helpdesk@troi.de
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Troi\Model;

use \ArrayAccess;
use \Troi\ObjectSerializer;

/**
 * AccountsPostRequest Class Doc Comment
 *
 * @category Class
 * @package  Troi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AccountsPostRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_accounts_post_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'number' => 'int',
        'client' => '\Troi\Model\ApiSyncItem',
        'default_contra_account' => '\Troi\Model\ApiSyncItem',
        'summary_account' => '\Troi\Model\ApiSyncItem',
        'is_active' => 'bool',
        'is_cash_desk_account' => 'bool',
        'is_bank_account' => 'bool',
        'is_automatic_account' => 'bool',
        'is_locked_for_datev' => 'bool',
        'tax_rate' => '\Troi\Model\ApiSyncItem',
        'account_group' => '\Troi\Model\ApiSyncItem',
        'id' => 'int',
        'id' => 'int',
        'path' => 'string',
        'e_tag' => 'string',
        'is_deleted' => 'bool',
        'class_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'number' => null,
        'client' => null,
        'default_contra_account' => null,
        'summary_account' => null,
        'is_active' => null,
        'is_cash_desk_account' => null,
        'is_bank_account' => null,
        'is_automatic_account' => null,
        'is_locked_for_datev' => null,
        'tax_rate' => null,
        'account_group' => null,
        'id' => null,
        'id' => null,
        'path' => null,
        'e_tag' => null,
        'is_deleted' => null,
        'class_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'number' => false,
        'client' => false,
        'default_contra_account' => false,
        'summary_account' => false,
        'is_active' => false,
        'is_cash_desk_account' => false,
        'is_bank_account' => false,
        'is_automatic_account' => false,
        'is_locked_for_datev' => false,
        'tax_rate' => false,
        'account_group' => false,
        'id' => false,
        'id' => false,
        'path' => false,
        'e_tag' => false,
        'is_deleted' => false,
        'class_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'Name',
        'number' => 'Number',
        'client' => 'Client',
        'default_contra_account' => 'DefaultContraAccount',
        'summary_account' => 'SummaryAccount',
        'is_active' => 'IsActive',
        'is_cash_desk_account' => 'IsCashDeskAccount',
        'is_bank_account' => 'IsBankAccount',
        'is_automatic_account' => 'IsAutomaticAccount',
        'is_locked_for_datev' => 'IsLockedForDatev',
        'tax_rate' => 'TaxRate',
        'account_group' => 'AccountGroup',
        'id' => 'id',
        'id' => 'Id',
        'path' => 'Path',
        'e_tag' => 'ETag',
        'is_deleted' => 'IsDeleted',
        'class_name' => 'ClassName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'number' => 'setNumber',
        'client' => 'setClient',
        'default_contra_account' => 'setDefaultContraAccount',
        'summary_account' => 'setSummaryAccount',
        'is_active' => 'setIsActive',
        'is_cash_desk_account' => 'setIsCashDeskAccount',
        'is_bank_account' => 'setIsBankAccount',
        'is_automatic_account' => 'setIsAutomaticAccount',
        'is_locked_for_datev' => 'setIsLockedForDatev',
        'tax_rate' => 'setTaxRate',
        'account_group' => 'setAccountGroup',
        'id' => 'setId',
        'id' => 'setId',
        'path' => 'setPath',
        'e_tag' => 'setETag',
        'is_deleted' => 'setIsDeleted',
        'class_name' => 'setClassName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'number' => 'getNumber',
        'client' => 'getClient',
        'default_contra_account' => 'getDefaultContraAccount',
        'summary_account' => 'getSummaryAccount',
        'is_active' => 'getIsActive',
        'is_cash_desk_account' => 'getIsCashDeskAccount',
        'is_bank_account' => 'getIsBankAccount',
        'is_automatic_account' => 'getIsAutomaticAccount',
        'is_locked_for_datev' => 'getIsLockedForDatev',
        'tax_rate' => 'getTaxRate',
        'account_group' => 'getAccountGroup',
        'id' => 'getId',
        'id' => 'getId',
        'path' => 'getPath',
        'e_tag' => 'getETag',
        'is_deleted' => 'getIsDeleted',
        'class_name' => 'getClassName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('client', $data ?? [], null);
        $this->setIfExists('default_contra_account', $data ?? [], null);
        $this->setIfExists('summary_account', $data ?? [], null);
        $this->setIfExists('is_active', $data ?? [], null);
        $this->setIfExists('is_cash_desk_account', $data ?? [], null);
        $this->setIfExists('is_bank_account', $data ?? [], null);
        $this->setIfExists('is_automatic_account', $data ?? [], null);
        $this->setIfExists('is_locked_for_datev', $data ?? [], null);
        $this->setIfExists('tax_rate', $data ?? [], null);
        $this->setIfExists('account_group', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('e_tag', $data ?? [], null);
        $this->setIfExists('is_deleted', $data ?? [], null);
        $this->setIfExists('class_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ($this->container['client'] === null) {
            $invalidProperties[] = "'client' can't be null";
        }
        if ($this->container['account_group'] === null) {
            $invalidProperties[] = "'account_group' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets number
     *
     * @return int
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int $number number
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets client
     *
     * @return \Troi\Model\ApiSyncItem
     */
    public function getClient()
    {
        return $this->container['client'];
    }

    /**
     * Sets client
     *
     * @param \Troi\Model\ApiSyncItem $client client
     *
     * @return self
     */
    public function setClient($client)
    {
        if (is_null($client)) {
            throw new \InvalidArgumentException('non-nullable client cannot be null');
        }
        $this->container['client'] = $client;

        return $this;
    }

    /**
     * Gets default_contra_account
     *
     * @return \Troi\Model\ApiSyncItem|null
     */
    public function getDefaultContraAccount()
    {
        return $this->container['default_contra_account'];
    }

    /**
     * Sets default_contra_account
     *
     * @param \Troi\Model\ApiSyncItem|null $default_contra_account default_contra_account
     *
     * @return self
     */
    public function setDefaultContraAccount($default_contra_account)
    {
        if (is_null($default_contra_account)) {
            throw new \InvalidArgumentException('non-nullable default_contra_account cannot be null');
        }
        $this->container['default_contra_account'] = $default_contra_account;

        return $this;
    }

    /**
     * Gets summary_account
     *
     * @return \Troi\Model\ApiSyncItem|null
     */
    public function getSummaryAccount()
    {
        return $this->container['summary_account'];
    }

    /**
     * Sets summary_account
     *
     * @param \Troi\Model\ApiSyncItem|null $summary_account summary_account
     *
     * @return self
     */
    public function setSummaryAccount($summary_account)
    {
        if (is_null($summary_account)) {
            throw new \InvalidArgumentException('non-nullable summary_account cannot be null');
        }
        $this->container['summary_account'] = $summary_account;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool|null
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool|null $is_active is_active
     *
     * @return self
     */
    public function setIsActive($is_active)
    {
        if (is_null($is_active)) {
            throw new \InvalidArgumentException('non-nullable is_active cannot be null');
        }
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets is_cash_desk_account
     *
     * @return bool|null
     */
    public function getIsCashDeskAccount()
    {
        return $this->container['is_cash_desk_account'];
    }

    /**
     * Sets is_cash_desk_account
     *
     * @param bool|null $is_cash_desk_account is_cash_desk_account
     *
     * @return self
     */
    public function setIsCashDeskAccount($is_cash_desk_account)
    {
        if (is_null($is_cash_desk_account)) {
            throw new \InvalidArgumentException('non-nullable is_cash_desk_account cannot be null');
        }
        $this->container['is_cash_desk_account'] = $is_cash_desk_account;

        return $this;
    }

    /**
     * Gets is_bank_account
     *
     * @return bool|null
     */
    public function getIsBankAccount()
    {
        return $this->container['is_bank_account'];
    }

    /**
     * Sets is_bank_account
     *
     * @param bool|null $is_bank_account is_bank_account
     *
     * @return self
     */
    public function setIsBankAccount($is_bank_account)
    {
        if (is_null($is_bank_account)) {
            throw new \InvalidArgumentException('non-nullable is_bank_account cannot be null');
        }
        $this->container['is_bank_account'] = $is_bank_account;

        return $this;
    }

    /**
     * Gets is_automatic_account
     *
     * @return bool|null
     */
    public function getIsAutomaticAccount()
    {
        return $this->container['is_automatic_account'];
    }

    /**
     * Sets is_automatic_account
     *
     * @param bool|null $is_automatic_account is_automatic_account
     *
     * @return self
     */
    public function setIsAutomaticAccount($is_automatic_account)
    {
        if (is_null($is_automatic_account)) {
            throw new \InvalidArgumentException('non-nullable is_automatic_account cannot be null');
        }
        $this->container['is_automatic_account'] = $is_automatic_account;

        return $this;
    }

    /**
     * Gets is_locked_for_datev
     *
     * @return bool|null
     */
    public function getIsLockedForDatev()
    {
        return $this->container['is_locked_for_datev'];
    }

    /**
     * Sets is_locked_for_datev
     *
     * @param bool|null $is_locked_for_datev is_locked_for_datev
     *
     * @return self
     */
    public function setIsLockedForDatev($is_locked_for_datev)
    {
        if (is_null($is_locked_for_datev)) {
            throw new \InvalidArgumentException('non-nullable is_locked_for_datev cannot be null');
        }
        $this->container['is_locked_for_datev'] = $is_locked_for_datev;

        return $this;
    }

    /**
     * Gets tax_rate
     *
     * @return \Troi\Model\ApiSyncItem|null
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     *
     * @param \Troi\Model\ApiSyncItem|null $tax_rate tax_rate
     *
     * @return self
     */
    public function setTaxRate($tax_rate)
    {
        if (is_null($tax_rate)) {
            throw new \InvalidArgumentException('non-nullable tax_rate cannot be null');
        }
        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }

    /**
     * Gets account_group
     *
     * @return \Troi\Model\ApiSyncItem
     */
    public function getAccountGroup()
    {
        return $this->container['account_group'];
    }

    /**
     * Sets account_group
     *
     * @param \Troi\Model\ApiSyncItem $account_group account_group
     *
     * @return self
     */
    public function setAccountGroup($account_group)
    {
        if (is_null($account_group)) {
            throw new \InvalidArgumentException('non-nullable account_group cannot be null');
        }
        $this->container['account_group'] = $account_group;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path path
     *
     * @return self
     */
    public function setPath($path)
    {
        if (is_null($path)) {
            throw new \InvalidArgumentException('non-nullable path cannot be null');
        }
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets e_tag
     *
     * @return string|null
     */
    public function getETag()
    {
        return $this->container['e_tag'];
    }

    /**
     * Sets e_tag
     *
     * @param string|null $e_tag e_tag
     *
     * @return self
     */
    public function setETag($e_tag)
    {
        if (is_null($e_tag)) {
            throw new \InvalidArgumentException('non-nullable e_tag cannot be null');
        }
        $this->container['e_tag'] = $e_tag;

        return $this;
    }

    /**
     * Gets is_deleted
     *
     * @return bool|null
     */
    public function getIsDeleted()
    {
        return $this->container['is_deleted'];
    }

    /**
     * Sets is_deleted
     *
     * @param bool|null $is_deleted is_deleted
     *
     * @return self
     */
    public function setIsDeleted($is_deleted)
    {
        if (is_null($is_deleted)) {
            throw new \InvalidArgumentException('non-nullable is_deleted cannot be null');
        }
        $this->container['is_deleted'] = $is_deleted;

        return $this;
    }

    /**
     * Gets class_name
     *
     * @return string|null
     */
    public function getClassName()
    {
        return $this->container['class_name'];
    }

    /**
     * Sets class_name
     *
     * @param string|null $class_name class_name
     *
     * @return self
     */
    public function setClassName($class_name)
    {
        if (is_null($class_name)) {
            throw new \InvalidArgumentException('non-nullable class_name cannot be null');
        }
        $this->container['class_name'] = $class_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


