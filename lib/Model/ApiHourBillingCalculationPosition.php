<?php
/**
 * ApiHourBillingCalculationPosition
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Troi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Troi API
 *
 * This is the official API documentation of Troi.  # Authentication  Troi offers basic auth for authentication.  <security-definitions />
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: helpdesk@troi.de
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Troi\Model;

use \ArrayAccess;
use \Troi\ObjectSerializer;

/**
 * ApiHourBillingCalculationPosition Class Doc Comment
 *
 * @category Class
 * @package  Troi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ApiHourBillingCalculationPosition implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ApiHourBilling_CalculationPosition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'order_number' => 'int',
        'name' => 'string',
        'external_description' => 'string',
        'internal_description' => 'string',
        'project' => '\Troi\Model\ApiProject',
        'subproject' => '\Troi\Model\ApiSubproject',
        'customer' => '\Troi\Model\ApiCustomer',
        'client' => '\Troi\Model\ApiClient',
        'is_external_service' => 'bool',
        'is_service_needed' => 'bool',
        'display_path' => 'string',
        'quantity' => 'float',
        'sale_price' => 'float',
        'purchase_price' => 'float',
        'total_calculation' => 'float',
        'unit' => '\Troi\Model\ApiUnit',
        'service' => '\Troi\Model\ApiService',
        'is_billable' => 'bool',
        'is_optional' => 'bool',
        'is_printable' => 'bool',
        'is_blocked_for_bookkeeping' => 'bool',
        'is_blocked_for_time_recording' => 'bool',
        'hour_closed' => 'bool',
        'account_id' => 'int',
        'cost_center_id' => 'int',
        'created_by' => 'int',
        'modified_by' => 'int',
        'deleted_by' => 'int',
        'created_at' => 'string',
        'modified_at' => 'string',
        'deleted_at' => 'string',
        'percentage_mode' => 'int',
        'is_percentage_global' => 'bool',
        'service_source' => 'string',
        'tax_rate' => '\Troi\Model\ApiService',
        'id' => 'int',
        'path' => 'string',
        'e_tag' => 'string',
        'is_deleted' => 'bool',
        'total_offer' => 'float',
        'rsas' => '\Troi\Model\ApiSyncItem[]',
        'last_rsa_date' => 'string',
        'cp_is_cleared' => 'bool',
        'class_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'order_number' => null,
        'name' => null,
        'external_description' => null,
        'internal_description' => null,
        'project' => null,
        'subproject' => null,
        'customer' => null,
        'client' => null,
        'is_external_service' => null,
        'is_service_needed' => null,
        'display_path' => null,
        'quantity' => null,
        'sale_price' => null,
        'purchase_price' => null,
        'total_calculation' => null,
        'unit' => null,
        'service' => null,
        'is_billable' => null,
        'is_optional' => null,
        'is_printable' => null,
        'is_blocked_for_bookkeeping' => null,
        'is_blocked_for_time_recording' => null,
        'hour_closed' => null,
        'account_id' => null,
        'cost_center_id' => null,
        'created_by' => null,
        'modified_by' => null,
        'deleted_by' => null,
        'created_at' => null,
        'modified_at' => null,
        'deleted_at' => null,
        'percentage_mode' => null,
        'is_percentage_global' => null,
        'service_source' => null,
        'tax_rate' => null,
        'id' => null,
        'path' => null,
        'e_tag' => null,
        'is_deleted' => null,
        'total_offer' => null,
        'rsas' => null,
        'last_rsa_date' => null,
        'cp_is_cleared' => null,
        'class_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'order_number' => false,
        'name' => false,
        'external_description' => false,
        'internal_description' => false,
        'project' => false,
        'subproject' => false,
        'customer' => false,
        'client' => false,
        'is_external_service' => false,
        'is_service_needed' => false,
        'display_path' => false,
        'quantity' => false,
        'sale_price' => false,
        'purchase_price' => false,
        'total_calculation' => false,
        'unit' => false,
        'service' => false,
        'is_billable' => false,
        'is_optional' => false,
        'is_printable' => false,
        'is_blocked_for_bookkeeping' => false,
        'is_blocked_for_time_recording' => false,
        'hour_closed' => false,
        'account_id' => false,
        'cost_center_id' => false,
        'created_by' => false,
        'modified_by' => false,
        'deleted_by' => false,
        'created_at' => false,
        'modified_at' => false,
        'deleted_at' => false,
        'percentage_mode' => false,
        'is_percentage_global' => false,
        'service_source' => false,
        'tax_rate' => false,
        'id' => false,
        'path' => false,
        'e_tag' => false,
        'is_deleted' => false,
        'total_offer' => false,
        'rsas' => false,
        'last_rsa_date' => false,
        'cp_is_cleared' => false,
        'class_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_number' => 'OrderNumber',
        'name' => 'Name',
        'external_description' => 'ExternalDescription',
        'internal_description' => 'InternalDescription',
        'project' => 'Project',
        'subproject' => 'Subproject',
        'customer' => 'Customer',
        'client' => 'Client',
        'is_external_service' => 'IsExternalService',
        'is_service_needed' => 'IsServiceNeeded',
        'display_path' => 'DisplayPath',
        'quantity' => 'Quantity',
        'sale_price' => 'SalePrice',
        'purchase_price' => 'PurchasePrice',
        'total_calculation' => 'TotalCalculation',
        'unit' => 'Unit',
        'service' => 'Service',
        'is_billable' => 'IsBillable',
        'is_optional' => 'IsOptional',
        'is_printable' => 'IsPrintable',
        'is_blocked_for_bookkeeping' => 'IsBlockedForBookkeeping',
        'is_blocked_for_time_recording' => 'IsBlockedForTimeRecording',
        'hour_closed' => 'HourClosed',
        'account_id' => 'AccountId',
        'cost_center_id' => 'CostCenterId',
        'created_by' => 'CreatedBy',
        'modified_by' => 'ModifiedBy',
        'deleted_by' => 'DeletedBy',
        'created_at' => 'CreatedAt',
        'modified_at' => 'ModifiedAt',
        'deleted_at' => 'DeletedAt',
        'percentage_mode' => 'PercentageMode',
        'is_percentage_global' => 'IsPercentageGlobal',
        'service_source' => 'ServiceSource',
        'tax_rate' => 'TaxRate',
        'id' => 'id',
        'path' => 'Path',
        'e_tag' => 'ETag',
        'is_deleted' => 'IsDeleted',
        'total_offer' => 'TotalOffer',
        'rsas' => 'RSAs',
        'last_rsa_date' => 'lastRsaDate',
        'cp_is_cleared' => 'cpIsCleared',
        'class_name' => 'ClassName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_number' => 'setOrderNumber',
        'name' => 'setName',
        'external_description' => 'setExternalDescription',
        'internal_description' => 'setInternalDescription',
        'project' => 'setProject',
        'subproject' => 'setSubproject',
        'customer' => 'setCustomer',
        'client' => 'setClient',
        'is_external_service' => 'setIsExternalService',
        'is_service_needed' => 'setIsServiceNeeded',
        'display_path' => 'setDisplayPath',
        'quantity' => 'setQuantity',
        'sale_price' => 'setSalePrice',
        'purchase_price' => 'setPurchasePrice',
        'total_calculation' => 'setTotalCalculation',
        'unit' => 'setUnit',
        'service' => 'setService',
        'is_billable' => 'setIsBillable',
        'is_optional' => 'setIsOptional',
        'is_printable' => 'setIsPrintable',
        'is_blocked_for_bookkeeping' => 'setIsBlockedForBookkeeping',
        'is_blocked_for_time_recording' => 'setIsBlockedForTimeRecording',
        'hour_closed' => 'setHourClosed',
        'account_id' => 'setAccountId',
        'cost_center_id' => 'setCostCenterId',
        'created_by' => 'setCreatedBy',
        'modified_by' => 'setModifiedBy',
        'deleted_by' => 'setDeletedBy',
        'created_at' => 'setCreatedAt',
        'modified_at' => 'setModifiedAt',
        'deleted_at' => 'setDeletedAt',
        'percentage_mode' => 'setPercentageMode',
        'is_percentage_global' => 'setIsPercentageGlobal',
        'service_source' => 'setServiceSource',
        'tax_rate' => 'setTaxRate',
        'id' => 'setId',
        'path' => 'setPath',
        'e_tag' => 'setETag',
        'is_deleted' => 'setIsDeleted',
        'total_offer' => 'setTotalOffer',
        'rsas' => 'setRsas',
        'last_rsa_date' => 'setLastRsaDate',
        'cp_is_cleared' => 'setCpIsCleared',
        'class_name' => 'setClassName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_number' => 'getOrderNumber',
        'name' => 'getName',
        'external_description' => 'getExternalDescription',
        'internal_description' => 'getInternalDescription',
        'project' => 'getProject',
        'subproject' => 'getSubproject',
        'customer' => 'getCustomer',
        'client' => 'getClient',
        'is_external_service' => 'getIsExternalService',
        'is_service_needed' => 'getIsServiceNeeded',
        'display_path' => 'getDisplayPath',
        'quantity' => 'getQuantity',
        'sale_price' => 'getSalePrice',
        'purchase_price' => 'getPurchasePrice',
        'total_calculation' => 'getTotalCalculation',
        'unit' => 'getUnit',
        'service' => 'getService',
        'is_billable' => 'getIsBillable',
        'is_optional' => 'getIsOptional',
        'is_printable' => 'getIsPrintable',
        'is_blocked_for_bookkeeping' => 'getIsBlockedForBookkeeping',
        'is_blocked_for_time_recording' => 'getIsBlockedForTimeRecording',
        'hour_closed' => 'getHourClosed',
        'account_id' => 'getAccountId',
        'cost_center_id' => 'getCostCenterId',
        'created_by' => 'getCreatedBy',
        'modified_by' => 'getModifiedBy',
        'deleted_by' => 'getDeletedBy',
        'created_at' => 'getCreatedAt',
        'modified_at' => 'getModifiedAt',
        'deleted_at' => 'getDeletedAt',
        'percentage_mode' => 'getPercentageMode',
        'is_percentage_global' => 'getIsPercentageGlobal',
        'service_source' => 'getServiceSource',
        'tax_rate' => 'getTaxRate',
        'id' => 'getId',
        'path' => 'getPath',
        'e_tag' => 'getETag',
        'is_deleted' => 'getIsDeleted',
        'total_offer' => 'getTotalOffer',
        'rsas' => 'getRsas',
        'last_rsa_date' => 'getLastRsaDate',
        'cp_is_cleared' => 'getCpIsCleared',
        'class_name' => 'getClassName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('order_number', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('external_description', $data ?? [], null);
        $this->setIfExists('internal_description', $data ?? [], null);
        $this->setIfExists('project', $data ?? [], null);
        $this->setIfExists('subproject', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('client', $data ?? [], null);
        $this->setIfExists('is_external_service', $data ?? [], null);
        $this->setIfExists('is_service_needed', $data ?? [], null);
        $this->setIfExists('display_path', $data ?? [], null);
        $this->setIfExists('quantity', $data ?? [], null);
        $this->setIfExists('sale_price', $data ?? [], null);
        $this->setIfExists('purchase_price', $data ?? [], null);
        $this->setIfExists('total_calculation', $data ?? [], null);
        $this->setIfExists('unit', $data ?? [], null);
        $this->setIfExists('service', $data ?? [], null);
        $this->setIfExists('is_billable', $data ?? [], null);
        $this->setIfExists('is_optional', $data ?? [], null);
        $this->setIfExists('is_printable', $data ?? [], null);
        $this->setIfExists('is_blocked_for_bookkeeping', $data ?? [], null);
        $this->setIfExists('is_blocked_for_time_recording', $data ?? [], null);
        $this->setIfExists('hour_closed', $data ?? [], null);
        $this->setIfExists('account_id', $data ?? [], null);
        $this->setIfExists('cost_center_id', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('modified_by', $data ?? [], null);
        $this->setIfExists('deleted_by', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('modified_at', $data ?? [], null);
        $this->setIfExists('deleted_at', $data ?? [], null);
        $this->setIfExists('percentage_mode', $data ?? [], null);
        $this->setIfExists('is_percentage_global', $data ?? [], null);
        $this->setIfExists('service_source', $data ?? [], null);
        $this->setIfExists('tax_rate', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('e_tag', $data ?? [], null);
        $this->setIfExists('is_deleted', $data ?? [], null);
        $this->setIfExists('total_offer', $data ?? [], null);
        $this->setIfExists('rsas', $data ?? [], null);
        $this->setIfExists('last_rsa_date', $data ?? [], null);
        $this->setIfExists('cp_is_cleared', $data ?? [], null);
        $this->setIfExists('class_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['path'] === null) {
            $invalidProperties[] = "'path' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_number
     *
     * @return int|null
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param int|null $order_number order_number
     *
     * @return self
     */
    public function setOrderNumber($order_number)
    {
        if (is_null($order_number)) {
            throw new \InvalidArgumentException('non-nullable order_number cannot be null');
        }
        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets external_description
     *
     * @return string|null
     */
    public function getExternalDescription()
    {
        return $this->container['external_description'];
    }

    /**
     * Sets external_description
     *
     * @param string|null $external_description external_description
     *
     * @return self
     */
    public function setExternalDescription($external_description)
    {
        if (is_null($external_description)) {
            throw new \InvalidArgumentException('non-nullable external_description cannot be null');
        }
        $this->container['external_description'] = $external_description;

        return $this;
    }

    /**
     * Gets internal_description
     *
     * @return string|null
     */
    public function getInternalDescription()
    {
        return $this->container['internal_description'];
    }

    /**
     * Sets internal_description
     *
     * @param string|null $internal_description internal_description
     *
     * @return self
     */
    public function setInternalDescription($internal_description)
    {
        if (is_null($internal_description)) {
            throw new \InvalidArgumentException('non-nullable internal_description cannot be null');
        }
        $this->container['internal_description'] = $internal_description;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \Troi\Model\ApiProject|null
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \Troi\Model\ApiProject|null $project project
     *
     * @return self
     */
    public function setProject($project)
    {
        if (is_null($project)) {
            throw new \InvalidArgumentException('non-nullable project cannot be null');
        }
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets subproject
     *
     * @return \Troi\Model\ApiSubproject|null
     */
    public function getSubproject()
    {
        return $this->container['subproject'];
    }

    /**
     * Sets subproject
     *
     * @param \Troi\Model\ApiSubproject|null $subproject subproject
     *
     * @return self
     */
    public function setSubproject($subproject)
    {
        if (is_null($subproject)) {
            throw new \InvalidArgumentException('non-nullable subproject cannot be null');
        }
        $this->container['subproject'] = $subproject;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \Troi\Model\ApiCustomer|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \Troi\Model\ApiCustomer|null $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets client
     *
     * @return \Troi\Model\ApiClient|null
     */
    public function getClient()
    {
        return $this->container['client'];
    }

    /**
     * Sets client
     *
     * @param \Troi\Model\ApiClient|null $client client
     *
     * @return self
     */
    public function setClient($client)
    {
        if (is_null($client)) {
            throw new \InvalidArgumentException('non-nullable client cannot be null');
        }
        $this->container['client'] = $client;

        return $this;
    }

    /**
     * Gets is_external_service
     *
     * @return bool|null
     */
    public function getIsExternalService()
    {
        return $this->container['is_external_service'];
    }

    /**
     * Sets is_external_service
     *
     * @param bool|null $is_external_service is_external_service
     *
     * @return self
     */
    public function setIsExternalService($is_external_service)
    {
        if (is_null($is_external_service)) {
            throw new \InvalidArgumentException('non-nullable is_external_service cannot be null');
        }
        $this->container['is_external_service'] = $is_external_service;

        return $this;
    }

    /**
     * Gets is_service_needed
     *
     * @return bool|null
     */
    public function getIsServiceNeeded()
    {
        return $this->container['is_service_needed'];
    }

    /**
     * Sets is_service_needed
     *
     * @param bool|null $is_service_needed is_service_needed
     *
     * @return self
     */
    public function setIsServiceNeeded($is_service_needed)
    {
        if (is_null($is_service_needed)) {
            throw new \InvalidArgumentException('non-nullable is_service_needed cannot be null');
        }
        $this->container['is_service_needed'] = $is_service_needed;

        return $this;
    }

    /**
     * Gets display_path
     *
     * @return string|null
     */
    public function getDisplayPath()
    {
        return $this->container['display_path'];
    }

    /**
     * Sets display_path
     *
     * @param string|null $display_path display_path
     *
     * @return self
     */
    public function setDisplayPath($display_path)
    {
        if (is_null($display_path)) {
            throw new \InvalidArgumentException('non-nullable display_path cannot be null');
        }
        $this->container['display_path'] = $display_path;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return float|null
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param float|null $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {
        if (is_null($quantity)) {
            throw new \InvalidArgumentException('non-nullable quantity cannot be null');
        }
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets sale_price
     *
     * @return float|null
     */
    public function getSalePrice()
    {
        return $this->container['sale_price'];
    }

    /**
     * Sets sale_price
     *
     * @param float|null $sale_price sale_price
     *
     * @return self
     */
    public function setSalePrice($sale_price)
    {
        if (is_null($sale_price)) {
            throw new \InvalidArgumentException('non-nullable sale_price cannot be null');
        }
        $this->container['sale_price'] = $sale_price;

        return $this;
    }

    /**
     * Gets purchase_price
     *
     * @return float|null
     */
    public function getPurchasePrice()
    {
        return $this->container['purchase_price'];
    }

    /**
     * Sets purchase_price
     *
     * @param float|null $purchase_price purchase_price
     *
     * @return self
     */
    public function setPurchasePrice($purchase_price)
    {
        if (is_null($purchase_price)) {
            throw new \InvalidArgumentException('non-nullable purchase_price cannot be null');
        }
        $this->container['purchase_price'] = $purchase_price;

        return $this;
    }

    /**
     * Gets total_calculation
     *
     * @return float|null
     */
    public function getTotalCalculation()
    {
        return $this->container['total_calculation'];
    }

    /**
     * Sets total_calculation
     *
     * @param float|null $total_calculation total_calculation
     *
     * @return self
     */
    public function setTotalCalculation($total_calculation)
    {
        if (is_null($total_calculation)) {
            throw new \InvalidArgumentException('non-nullable total_calculation cannot be null');
        }
        $this->container['total_calculation'] = $total_calculation;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return \Troi\Model\ApiUnit|null
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param \Troi\Model\ApiUnit|null $unit unit
     *
     * @return self
     */
    public function setUnit($unit)
    {
        if (is_null($unit)) {
            throw new \InvalidArgumentException('non-nullable unit cannot be null');
        }
        $this->container['unit'] = $unit;

        return $this;
    }

    /**
     * Gets service
     *
     * @return \Troi\Model\ApiService|null
     */
    public function getService()
    {
        return $this->container['service'];
    }

    /**
     * Sets service
     *
     * @param \Troi\Model\ApiService|null $service service
     *
     * @return self
     */
    public function setService($service)
    {
        if (is_null($service)) {
            throw new \InvalidArgumentException('non-nullable service cannot be null');
        }
        $this->container['service'] = $service;

        return $this;
    }

    /**
     * Gets is_billable
     *
     * @return bool|null
     */
    public function getIsBillable()
    {
        return $this->container['is_billable'];
    }

    /**
     * Sets is_billable
     *
     * @param bool|null $is_billable is_billable
     *
     * @return self
     */
    public function setIsBillable($is_billable)
    {
        if (is_null($is_billable)) {
            throw new \InvalidArgumentException('non-nullable is_billable cannot be null');
        }
        $this->container['is_billable'] = $is_billable;

        return $this;
    }

    /**
     * Gets is_optional
     *
     * @return bool|null
     */
    public function getIsOptional()
    {
        return $this->container['is_optional'];
    }

    /**
     * Sets is_optional
     *
     * @param bool|null $is_optional is_optional
     *
     * @return self
     */
    public function setIsOptional($is_optional)
    {
        if (is_null($is_optional)) {
            throw new \InvalidArgumentException('non-nullable is_optional cannot be null');
        }
        $this->container['is_optional'] = $is_optional;

        return $this;
    }

    /**
     * Gets is_printable
     *
     * @return bool|null
     */
    public function getIsPrintable()
    {
        return $this->container['is_printable'];
    }

    /**
     * Sets is_printable
     *
     * @param bool|null $is_printable is_printable
     *
     * @return self
     */
    public function setIsPrintable($is_printable)
    {
        if (is_null($is_printable)) {
            throw new \InvalidArgumentException('non-nullable is_printable cannot be null');
        }
        $this->container['is_printable'] = $is_printable;

        return $this;
    }

    /**
     * Gets is_blocked_for_bookkeeping
     *
     * @return bool|null
     */
    public function getIsBlockedForBookkeeping()
    {
        return $this->container['is_blocked_for_bookkeeping'];
    }

    /**
     * Sets is_blocked_for_bookkeeping
     *
     * @param bool|null $is_blocked_for_bookkeeping is_blocked_for_bookkeeping
     *
     * @return self
     */
    public function setIsBlockedForBookkeeping($is_blocked_for_bookkeeping)
    {
        if (is_null($is_blocked_for_bookkeeping)) {
            throw new \InvalidArgumentException('non-nullable is_blocked_for_bookkeeping cannot be null');
        }
        $this->container['is_blocked_for_bookkeeping'] = $is_blocked_for_bookkeeping;

        return $this;
    }

    /**
     * Gets is_blocked_for_time_recording
     *
     * @return bool|null
     */
    public function getIsBlockedForTimeRecording()
    {
        return $this->container['is_blocked_for_time_recording'];
    }

    /**
     * Sets is_blocked_for_time_recording
     *
     * @param bool|null $is_blocked_for_time_recording is_blocked_for_time_recording
     *
     * @return self
     */
    public function setIsBlockedForTimeRecording($is_blocked_for_time_recording)
    {
        if (is_null($is_blocked_for_time_recording)) {
            throw new \InvalidArgumentException('non-nullable is_blocked_for_time_recording cannot be null');
        }
        $this->container['is_blocked_for_time_recording'] = $is_blocked_for_time_recording;

        return $this;
    }

    /**
     * Gets hour_closed
     *
     * @return bool|null
     */
    public function getHourClosed()
    {
        return $this->container['hour_closed'];
    }

    /**
     * Sets hour_closed
     *
     * @param bool|null $hour_closed hour_closed
     *
     * @return self
     */
    public function setHourClosed($hour_closed)
    {
        if (is_null($hour_closed)) {
            throw new \InvalidArgumentException('non-nullable hour_closed cannot be null');
        }
        $this->container['hour_closed'] = $hour_closed;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return int|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int|null $account_id account_id
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        if (is_null($account_id)) {
            throw new \InvalidArgumentException('non-nullable account_id cannot be null');
        }
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets cost_center_id
     *
     * @return int|null
     */
    public function getCostCenterId()
    {
        return $this->container['cost_center_id'];
    }

    /**
     * Sets cost_center_id
     *
     * @param int|null $cost_center_id cost_center_id
     *
     * @return self
     */
    public function setCostCenterId($cost_center_id)
    {
        if (is_null($cost_center_id)) {
            throw new \InvalidArgumentException('non-nullable cost_center_id cannot be null');
        }
        $this->container['cost_center_id'] = $cost_center_id;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return int|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param int|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets modified_by
     *
     * @return int|null
     */
    public function getModifiedBy()
    {
        return $this->container['modified_by'];
    }

    /**
     * Sets modified_by
     *
     * @param int|null $modified_by modified_by
     *
     * @return self
     */
    public function setModifiedBy($modified_by)
    {
        if (is_null($modified_by)) {
            throw new \InvalidArgumentException('non-nullable modified_by cannot be null');
        }
        $this->container['modified_by'] = $modified_by;

        return $this;
    }

    /**
     * Gets deleted_by
     *
     * @return int|null
     */
    public function getDeletedBy()
    {
        return $this->container['deleted_by'];
    }

    /**
     * Sets deleted_by
     *
     * @param int|null $deleted_by deleted_by
     *
     * @return self
     */
    public function setDeletedBy($deleted_by)
    {
        if (is_null($deleted_by)) {
            throw new \InvalidArgumentException('non-nullable deleted_by cannot be null');
        }
        $this->container['deleted_by'] = $deleted_by;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets modified_at
     *
     * @return string|null
     */
    public function getModifiedAt()
    {
        return $this->container['modified_at'];
    }

    /**
     * Sets modified_at
     *
     * @param string|null $modified_at modified_at
     *
     * @return self
     */
    public function setModifiedAt($modified_at)
    {
        if (is_null($modified_at)) {
            throw new \InvalidArgumentException('non-nullable modified_at cannot be null');
        }
        $this->container['modified_at'] = $modified_at;

        return $this;
    }

    /**
     * Gets deleted_at
     *
     * @return string|null
     */
    public function getDeletedAt()
    {
        return $this->container['deleted_at'];
    }

    /**
     * Sets deleted_at
     *
     * @param string|null $deleted_at deleted_at
     *
     * @return self
     */
    public function setDeletedAt($deleted_at)
    {
        if (is_null($deleted_at)) {
            throw new \InvalidArgumentException('non-nullable deleted_at cannot be null');
        }
        $this->container['deleted_at'] = $deleted_at;

        return $this;
    }

    /**
     * Gets percentage_mode
     *
     * @return int|null
     */
    public function getPercentageMode()
    {
        return $this->container['percentage_mode'];
    }

    /**
     * Sets percentage_mode
     *
     * @param int|null $percentage_mode percentage_mode
     *
     * @return self
     */
    public function setPercentageMode($percentage_mode)
    {
        if (is_null($percentage_mode)) {
            throw new \InvalidArgumentException('non-nullable percentage_mode cannot be null');
        }
        $this->container['percentage_mode'] = $percentage_mode;

        return $this;
    }

    /**
     * Gets is_percentage_global
     *
     * @return bool|null
     */
    public function getIsPercentageGlobal()
    {
        return $this->container['is_percentage_global'];
    }

    /**
     * Sets is_percentage_global
     *
     * @param bool|null $is_percentage_global is_percentage_global
     *
     * @return self
     */
    public function setIsPercentageGlobal($is_percentage_global)
    {
        if (is_null($is_percentage_global)) {
            throw new \InvalidArgumentException('non-nullable is_percentage_global cannot be null');
        }
        $this->container['is_percentage_global'] = $is_percentage_global;

        return $this;
    }

    /**
     * Gets service_source
     *
     * @return string|null
     */
    public function getServiceSource()
    {
        return $this->container['service_source'];
    }

    /**
     * Sets service_source
     *
     * @param string|null $service_source service_source
     *
     * @return self
     */
    public function setServiceSource($service_source)
    {
        if (is_null($service_source)) {
            throw new \InvalidArgumentException('non-nullable service_source cannot be null');
        }
        $this->container['service_source'] = $service_source;

        return $this;
    }

    /**
     * Gets tax_rate
     *
     * @return \Troi\Model\ApiService|null
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     *
     * @param \Troi\Model\ApiService|null $tax_rate tax_rate
     *
     * @return self
     */
    public function setTaxRate($tax_rate)
    {
        if (is_null($tax_rate)) {
            throw new \InvalidArgumentException('non-nullable tax_rate cannot be null');
        }
        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path path
     *
     * @return self
     */
    public function setPath($path)
    {
        if (is_null($path)) {
            throw new \InvalidArgumentException('non-nullable path cannot be null');
        }
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets e_tag
     *
     * @return string|null
     */
    public function getETag()
    {
        return $this->container['e_tag'];
    }

    /**
     * Sets e_tag
     *
     * @param string|null $e_tag e_tag
     *
     * @return self
     */
    public function setETag($e_tag)
    {
        if (is_null($e_tag)) {
            throw new \InvalidArgumentException('non-nullable e_tag cannot be null');
        }
        $this->container['e_tag'] = $e_tag;

        return $this;
    }

    /**
     * Gets is_deleted
     *
     * @return bool|null
     */
    public function getIsDeleted()
    {
        return $this->container['is_deleted'];
    }

    /**
     * Sets is_deleted
     *
     * @param bool|null $is_deleted is_deleted
     *
     * @return self
     */
    public function setIsDeleted($is_deleted)
    {
        if (is_null($is_deleted)) {
            throw new \InvalidArgumentException('non-nullable is_deleted cannot be null');
        }
        $this->container['is_deleted'] = $is_deleted;

        return $this;
    }

    /**
     * Gets total_offer
     *
     * @return float|null
     */
    public function getTotalOffer()
    {
        return $this->container['total_offer'];
    }

    /**
     * Sets total_offer
     *
     * @param float|null $total_offer total_offer
     *
     * @return self
     */
    public function setTotalOffer($total_offer)
    {
        if (is_null($total_offer)) {
            throw new \InvalidArgumentException('non-nullable total_offer cannot be null');
        }
        $this->container['total_offer'] = $total_offer;

        return $this;
    }

    /**
     * Gets rsas
     *
     * @return \Troi\Model\ApiSyncItem[]|null
     */
    public function getRsas()
    {
        return $this->container['rsas'];
    }

    /**
     * Sets rsas
     *
     * @param \Troi\Model\ApiSyncItem[]|null $rsas rsas
     *
     * @return self
     */
    public function setRsas($rsas)
    {
        if (is_null($rsas)) {
            throw new \InvalidArgumentException('non-nullable rsas cannot be null');
        }
        $this->container['rsas'] = $rsas;

        return $this;
    }

    /**
     * Gets last_rsa_date
     *
     * @return string|null
     */
    public function getLastRsaDate()
    {
        return $this->container['last_rsa_date'];
    }

    /**
     * Sets last_rsa_date
     *
     * @param string|null $last_rsa_date last_rsa_date
     *
     * @return self
     */
    public function setLastRsaDate($last_rsa_date)
    {
        if (is_null($last_rsa_date)) {
            throw new \InvalidArgumentException('non-nullable last_rsa_date cannot be null');
        }
        $this->container['last_rsa_date'] = $last_rsa_date;

        return $this;
    }

    /**
     * Gets cp_is_cleared
     *
     * @return bool|null
     */
    public function getCpIsCleared()
    {
        return $this->container['cp_is_cleared'];
    }

    /**
     * Sets cp_is_cleared
     *
     * @param bool|null $cp_is_cleared cp_is_cleared
     *
     * @return self
     */
    public function setCpIsCleared($cp_is_cleared)
    {
        if (is_null($cp_is_cleared)) {
            throw new \InvalidArgumentException('non-nullable cp_is_cleared cannot be null');
        }
        $this->container['cp_is_cleared'] = $cp_is_cleared;

        return $this;
    }

    /**
     * Gets class_name
     *
     * @return string|null
     */
    public function getClassName()
    {
        return $this->container['class_name'];
    }

    /**
     * Sets class_name
     *
     * @param string|null $class_name class_name
     *
     * @return self
     */
    public function setClassName($class_name)
    {
        if (is_null($class_name)) {
            throw new \InvalidArgumentException('non-nullable class_name cannot be null');
        }
        $this->container['class_name'] = $class_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


