<?php
/**
 * ApiHourBillingClient
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Troi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Troi API
 *
 * This is the official API documentation of Troi.  # Authentication  Troi offers basic auth for authentication.  <security-definitions />
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: helpdesk@troi.de
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Troi\Model;

use \ArrayAccess;
use \Troi\ObjectSerializer;

/**
 * ApiHourBillingClient Class Doc Comment
 *
 * @category Class
 * @package  Troi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ApiHourBillingClient implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ApiHourBilling_Client';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'name' => 'string',
        'is_favorite' => 'bool',
        'is_printable' => 'bool',
        'parent_path' => 'string',
        'ree_employee_id' => 'int',
        'ree_cp_id' => 'int',
        'ree_sub_project_id' => 'int',
        'ree_project_id' => 'int',
        'ree_quantity' => 'int',
        'ree_date' => 'object',
        'ree_service_id' => 'int',
        'id' => 'int',
        'id' => 'int',
        'path' => 'string',
        'e_tag' => 'int',
        'is_deleted' => 'bool',
        'class_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'name' => null,
        'is_favorite' => null,
        'is_printable' => null,
        'parent_path' => null,
        'ree_employee_id' => null,
        'ree_cp_id' => null,
        'ree_sub_project_id' => null,
        'ree_project_id' => null,
        'ree_quantity' => null,
        'ree_date' => null,
        'ree_service_id' => null,
        'id' => null,
        'id' => null,
        'path' => null,
        'e_tag' => null,
        'is_deleted' => null,
        'class_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => false,
        'name' => false,
        'is_favorite' => false,
        'is_printable' => false,
        'parent_path' => false,
        'ree_employee_id' => false,
        'ree_cp_id' => false,
        'ree_sub_project_id' => false,
        'ree_project_id' => false,
        'ree_quantity' => false,
        'ree_date' => false,
        'ree_service_id' => false,
        'id' => false,
        'id' => false,
        'path' => false,
        'e_tag' => false,
        'is_deleted' => false,
        'class_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'Type',
        'name' => 'Name',
        'is_favorite' => 'IsFavorite',
        'is_printable' => 'IsPrintable',
        'parent_path' => 'ParentPath',
        'ree_employee_id' => 'ReeEmployeeId',
        'ree_cp_id' => 'ReeCpId',
        'ree_sub_project_id' => 'ReeSubProjectId',
        'ree_project_id' => 'ReeProjectId',
        'ree_quantity' => 'ReeQuantity',
        'ree_date' => 'ReeDate',
        'ree_service_id' => 'ReeServiceId',
        'id' => 'id',
        'id' => 'Id',
        'path' => 'Path',
        'e_tag' => 'ETag',
        'is_deleted' => 'IsDeleted',
        'class_name' => 'ClassName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'name' => 'setName',
        'is_favorite' => 'setIsFavorite',
        'is_printable' => 'setIsPrintable',
        'parent_path' => 'setParentPath',
        'ree_employee_id' => 'setReeEmployeeId',
        'ree_cp_id' => 'setReeCpId',
        'ree_sub_project_id' => 'setReeSubProjectId',
        'ree_project_id' => 'setReeProjectId',
        'ree_quantity' => 'setReeQuantity',
        'ree_date' => 'setReeDate',
        'ree_service_id' => 'setReeServiceId',
        'id' => 'setId',
        'id' => 'setId',
        'path' => 'setPath',
        'e_tag' => 'setETag',
        'is_deleted' => 'setIsDeleted',
        'class_name' => 'setClassName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'name' => 'getName',
        'is_favorite' => 'getIsFavorite',
        'is_printable' => 'getIsPrintable',
        'parent_path' => 'getParentPath',
        'ree_employee_id' => 'getReeEmployeeId',
        'ree_cp_id' => 'getReeCpId',
        'ree_sub_project_id' => 'getReeSubProjectId',
        'ree_project_id' => 'getReeProjectId',
        'ree_quantity' => 'getReeQuantity',
        'ree_date' => 'getReeDate',
        'ree_service_id' => 'getReeServiceId',
        'id' => 'getId',
        'id' => 'getId',
        'path' => 'getPath',
        'e_tag' => 'getETag',
        'is_deleted' => 'getIsDeleted',
        'class_name' => 'getClassName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('is_favorite', $data ?? [], null);
        $this->setIfExists('is_printable', $data ?? [], null);
        $this->setIfExists('parent_path', $data ?? [], null);
        $this->setIfExists('ree_employee_id', $data ?? [], null);
        $this->setIfExists('ree_cp_id', $data ?? [], null);
        $this->setIfExists('ree_sub_project_id', $data ?? [], null);
        $this->setIfExists('ree_project_id', $data ?? [], null);
        $this->setIfExists('ree_quantity', $data ?? [], null);
        $this->setIfExists('ree_date', $data ?? [], null);
        $this->setIfExists('ree_service_id', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('e_tag', $data ?? [], null);
        $this->setIfExists('is_deleted', $data ?? [], null);
        $this->setIfExists('class_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['path'] === null) {
            $invalidProperties[] = "'path' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets is_favorite
     *
     * @return bool|null
     */
    public function getIsFavorite()
    {
        return $this->container['is_favorite'];
    }

    /**
     * Sets is_favorite
     *
     * @param bool|null $is_favorite is_favorite
     *
     * @return self
     */
    public function setIsFavorite($is_favorite)
    {
        if (is_null($is_favorite)) {
            throw new \InvalidArgumentException('non-nullable is_favorite cannot be null');
        }
        $this->container['is_favorite'] = $is_favorite;

        return $this;
    }

    /**
     * Gets is_printable
     *
     * @return bool|null
     */
    public function getIsPrintable()
    {
        return $this->container['is_printable'];
    }

    /**
     * Sets is_printable
     *
     * @param bool|null $is_printable is_printable
     *
     * @return self
     */
    public function setIsPrintable($is_printable)
    {
        if (is_null($is_printable)) {
            throw new \InvalidArgumentException('non-nullable is_printable cannot be null');
        }
        $this->container['is_printable'] = $is_printable;

        return $this;
    }

    /**
     * Gets parent_path
     *
     * @return string|null
     */
    public function getParentPath()
    {
        return $this->container['parent_path'];
    }

    /**
     * Sets parent_path
     *
     * @param string|null $parent_path parent_path
     *
     * @return self
     */
    public function setParentPath($parent_path)
    {
        if (is_null($parent_path)) {
            throw new \InvalidArgumentException('non-nullable parent_path cannot be null');
        }
        $this->container['parent_path'] = $parent_path;

        return $this;
    }

    /**
     * Gets ree_employee_id
     *
     * @return int|null
     */
    public function getReeEmployeeId()
    {
        return $this->container['ree_employee_id'];
    }

    /**
     * Sets ree_employee_id
     *
     * @param int|null $ree_employee_id ree_employee_id
     *
     * @return self
     */
    public function setReeEmployeeId($ree_employee_id)
    {
        if (is_null($ree_employee_id)) {
            throw new \InvalidArgumentException('non-nullable ree_employee_id cannot be null');
        }
        $this->container['ree_employee_id'] = $ree_employee_id;

        return $this;
    }

    /**
     * Gets ree_cp_id
     *
     * @return int|null
     */
    public function getReeCpId()
    {
        return $this->container['ree_cp_id'];
    }

    /**
     * Sets ree_cp_id
     *
     * @param int|null $ree_cp_id ree_cp_id
     *
     * @return self
     */
    public function setReeCpId($ree_cp_id)
    {
        if (is_null($ree_cp_id)) {
            throw new \InvalidArgumentException('non-nullable ree_cp_id cannot be null');
        }
        $this->container['ree_cp_id'] = $ree_cp_id;

        return $this;
    }

    /**
     * Gets ree_sub_project_id
     *
     * @return int|null
     */
    public function getReeSubProjectId()
    {
        return $this->container['ree_sub_project_id'];
    }

    /**
     * Sets ree_sub_project_id
     *
     * @param int|null $ree_sub_project_id ree_sub_project_id
     *
     * @return self
     */
    public function setReeSubProjectId($ree_sub_project_id)
    {
        if (is_null($ree_sub_project_id)) {
            throw new \InvalidArgumentException('non-nullable ree_sub_project_id cannot be null');
        }
        $this->container['ree_sub_project_id'] = $ree_sub_project_id;

        return $this;
    }

    /**
     * Gets ree_project_id
     *
     * @return int|null
     */
    public function getReeProjectId()
    {
        return $this->container['ree_project_id'];
    }

    /**
     * Sets ree_project_id
     *
     * @param int|null $ree_project_id ree_project_id
     *
     * @return self
     */
    public function setReeProjectId($ree_project_id)
    {
        if (is_null($ree_project_id)) {
            throw new \InvalidArgumentException('non-nullable ree_project_id cannot be null');
        }
        $this->container['ree_project_id'] = $ree_project_id;

        return $this;
    }

    /**
     * Gets ree_quantity
     *
     * @return int|null
     */
    public function getReeQuantity()
    {
        return $this->container['ree_quantity'];
    }

    /**
     * Sets ree_quantity
     *
     * @param int|null $ree_quantity ree_quantity
     *
     * @return self
     */
    public function setReeQuantity($ree_quantity)
    {
        if (is_null($ree_quantity)) {
            throw new \InvalidArgumentException('non-nullable ree_quantity cannot be null');
        }
        $this->container['ree_quantity'] = $ree_quantity;

        return $this;
    }

    /**
     * Gets ree_date
     *
     * @return object|null
     */
    public function getReeDate()
    {
        return $this->container['ree_date'];
    }

    /**
     * Sets ree_date
     *
     * @param object|null $ree_date ree_date
     *
     * @return self
     */
    public function setReeDate($ree_date)
    {
        if (is_null($ree_date)) {
            throw new \InvalidArgumentException('non-nullable ree_date cannot be null');
        }
        $this->container['ree_date'] = $ree_date;

        return $this;
    }

    /**
     * Gets ree_service_id
     *
     * @return int|null
     */
    public function getReeServiceId()
    {
        return $this->container['ree_service_id'];
    }

    /**
     * Sets ree_service_id
     *
     * @param int|null $ree_service_id ree_service_id
     *
     * @return self
     */
    public function setReeServiceId($ree_service_id)
    {
        if (is_null($ree_service_id)) {
            throw new \InvalidArgumentException('non-nullable ree_service_id cannot be null');
        }
        $this->container['ree_service_id'] = $ree_service_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path path
     *
     * @return self
     */
    public function setPath($path)
    {
        if (is_null($path)) {
            throw new \InvalidArgumentException('non-nullable path cannot be null');
        }
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets e_tag
     *
     * @return int|null
     */
    public function getETag()
    {
        return $this->container['e_tag'];
    }

    /**
     * Sets e_tag
     *
     * @param int|null $e_tag e_tag
     *
     * @return self
     */
    public function setETag($e_tag)
    {
        if (is_null($e_tag)) {
            throw new \InvalidArgumentException('non-nullable e_tag cannot be null');
        }
        $this->container['e_tag'] = $e_tag;

        return $this;
    }

    /**
     * Gets is_deleted
     *
     * @return bool|null
     */
    public function getIsDeleted()
    {
        return $this->container['is_deleted'];
    }

    /**
     * Sets is_deleted
     *
     * @param bool|null $is_deleted is_deleted
     *
     * @return self
     */
    public function setIsDeleted($is_deleted)
    {
        if (is_null($is_deleted)) {
            throw new \InvalidArgumentException('non-nullable is_deleted cannot be null');
        }
        $this->container['is_deleted'] = $is_deleted;

        return $this;
    }

    /**
     * Gets class_name
     *
     * @return string|null
     */
    public function getClassName()
    {
        return $this->container['class_name'];
    }

    /**
     * Sets class_name
     *
     * @param string|null $class_name class_name
     *
     * @return self
     */
    public function setClassName($class_name)
    {
        if (is_null($class_name)) {
            throw new \InvalidArgumentException('non-nullable class_name cannot be null');
        }
        $this->container['class_name'] = $class_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


