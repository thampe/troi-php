<?php
/**
 * ApiSubproject
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Troi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Troi API
 *
 * This is the official API documentation of Troi.  # Authentication  Troi offers basic auth for authentication.  <security-definitions />
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: helpdesk@troi.de
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Troi\Model;

use \ArrayAccess;
use \Troi\ObjectSerializer;

/**
 * ApiSubproject Class Doc Comment
 *
 * @category Class
 * @package  Troi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ApiSubproject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ApiSubproject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'external_description' => 'string',
        'internal_description' => 'string',
        'status' => '\Troi\Model\ApiProjectStatus',
        'is_approved' => 'bool',
        'project' => '\Troi\Model\ApiProject',
        'calculation_positions' => '\Troi\Model\ApiCalculationPosition[]',
        'parent' => '\Troi\Model\ApiSubproject',
        'is_leaf' => 'bool',
        'is_printable' => 'bool',
        'order_number' => 'string',
        'set_left' => 'string',
        'set_right' => 'string',
        'leader' => '\Troi\Model\ApiEmployee',
        'created_by' => 'string',
        'modified_by' => 'string',
        'deleted_by' => 'string',
        'created_at' => 'string',
        'modified_at' => 'string',
        'deleted_at' => 'string',
        'id' => 'int',
        'path' => 'string',
        'is_deleted' => 'bool',
        'total_subproject' => 'string',
        'sub_project_types' => '\Troi\Model\ApiProjectType[]',
        'class_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'external_description' => null,
        'internal_description' => null,
        'status' => null,
        'is_approved' => null,
        'project' => null,
        'calculation_positions' => null,
        'parent' => null,
        'is_leaf' => null,
        'is_printable' => null,
        'order_number' => null,
        'set_left' => null,
        'set_right' => null,
        'leader' => null,
        'created_by' => null,
        'modified_by' => null,
        'deleted_by' => null,
        'created_at' => null,
        'modified_at' => null,
        'deleted_at' => null,
        'id' => null,
        'path' => null,
        'is_deleted' => null,
        'total_subproject' => null,
        'sub_project_types' => null,
        'class_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'external_description' => false,
        'internal_description' => false,
        'status' => false,
        'is_approved' => false,
        'project' => false,
        'calculation_positions' => false,
        'parent' => false,
        'is_leaf' => false,
        'is_printable' => false,
        'order_number' => false,
        'set_left' => false,
        'set_right' => false,
        'leader' => false,
        'created_by' => false,
        'modified_by' => false,
        'deleted_by' => false,
        'created_at' => false,
        'modified_at' => false,
        'deleted_at' => false,
        'id' => false,
        'path' => false,
        'is_deleted' => false,
        'total_subproject' => false,
        'sub_project_types' => false,
        'class_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'Name',
        'external_description' => 'ExternalDescription',
        'internal_description' => 'InternalDescription',
        'status' => 'Status',
        'is_approved' => 'IsApproved',
        'project' => 'Project',
        'calculation_positions' => 'CalculationPositions',
        'parent' => 'Parent',
        'is_leaf' => 'IsLeaf',
        'is_printable' => 'IsPrintable',
        'order_number' => 'OrderNumber',
        'set_left' => 'SetLeft',
        'set_right' => 'SetRight',
        'leader' => 'Leader',
        'created_by' => 'CreatedBy',
        'modified_by' => 'ModifiedBy',
        'deleted_by' => 'DeletedBy',
        'created_at' => 'CreatedAt',
        'modified_at' => 'ModifiedAt',
        'deleted_at' => 'DeletedAt',
        'id' => 'id',
        'path' => 'Path',
        'is_deleted' => 'IsDeleted',
        'total_subproject' => 'TotalSubproject',
        'sub_project_types' => 'subProjectTypes',
        'class_name' => 'ClassName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'external_description' => 'setExternalDescription',
        'internal_description' => 'setInternalDescription',
        'status' => 'setStatus',
        'is_approved' => 'setIsApproved',
        'project' => 'setProject',
        'calculation_positions' => 'setCalculationPositions',
        'parent' => 'setParent',
        'is_leaf' => 'setIsLeaf',
        'is_printable' => 'setIsPrintable',
        'order_number' => 'setOrderNumber',
        'set_left' => 'setSetLeft',
        'set_right' => 'setSetRight',
        'leader' => 'setLeader',
        'created_by' => 'setCreatedBy',
        'modified_by' => 'setModifiedBy',
        'deleted_by' => 'setDeletedBy',
        'created_at' => 'setCreatedAt',
        'modified_at' => 'setModifiedAt',
        'deleted_at' => 'setDeletedAt',
        'id' => 'setId',
        'path' => 'setPath',
        'is_deleted' => 'setIsDeleted',
        'total_subproject' => 'setTotalSubproject',
        'sub_project_types' => 'setSubProjectTypes',
        'class_name' => 'setClassName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'external_description' => 'getExternalDescription',
        'internal_description' => 'getInternalDescription',
        'status' => 'getStatus',
        'is_approved' => 'getIsApproved',
        'project' => 'getProject',
        'calculation_positions' => 'getCalculationPositions',
        'parent' => 'getParent',
        'is_leaf' => 'getIsLeaf',
        'is_printable' => 'getIsPrintable',
        'order_number' => 'getOrderNumber',
        'set_left' => 'getSetLeft',
        'set_right' => 'getSetRight',
        'leader' => 'getLeader',
        'created_by' => 'getCreatedBy',
        'modified_by' => 'getModifiedBy',
        'deleted_by' => 'getDeletedBy',
        'created_at' => 'getCreatedAt',
        'modified_at' => 'getModifiedAt',
        'deleted_at' => 'getDeletedAt',
        'id' => 'getId',
        'path' => 'getPath',
        'is_deleted' => 'getIsDeleted',
        'total_subproject' => 'getTotalSubproject',
        'sub_project_types' => 'getSubProjectTypes',
        'class_name' => 'getClassName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('external_description', $data ?? [], null);
        $this->setIfExists('internal_description', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('is_approved', $data ?? [], null);
        $this->setIfExists('project', $data ?? [], null);
        $this->setIfExists('calculation_positions', $data ?? [], null);
        $this->setIfExists('parent', $data ?? [], null);
        $this->setIfExists('is_leaf', $data ?? [], null);
        $this->setIfExists('is_printable', $data ?? [], null);
        $this->setIfExists('order_number', $data ?? [], null);
        $this->setIfExists('set_left', $data ?? [], null);
        $this->setIfExists('set_right', $data ?? [], null);
        $this->setIfExists('leader', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('modified_by', $data ?? [], null);
        $this->setIfExists('deleted_by', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('modified_at', $data ?? [], null);
        $this->setIfExists('deleted_at', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('is_deleted', $data ?? [], null);
        $this->setIfExists('total_subproject', $data ?? [], null);
        $this->setIfExists('sub_project_types', $data ?? [], null);
        $this->setIfExists('class_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets external_description
     *
     * @return string|null
     */
    public function getExternalDescription()
    {
        return $this->container['external_description'];
    }

    /**
     * Sets external_description
     *
     * @param string|null $external_description external_description
     *
     * @return self
     */
    public function setExternalDescription($external_description)
    {
        if (is_null($external_description)) {
            throw new \InvalidArgumentException('non-nullable external_description cannot be null');
        }
        $this->container['external_description'] = $external_description;

        return $this;
    }

    /**
     * Gets internal_description
     *
     * @return string|null
     */
    public function getInternalDescription()
    {
        return $this->container['internal_description'];
    }

    /**
     * Sets internal_description
     *
     * @param string|null $internal_description internal_description
     *
     * @return self
     */
    public function setInternalDescription($internal_description)
    {
        if (is_null($internal_description)) {
            throw new \InvalidArgumentException('non-nullable internal_description cannot be null');
        }
        $this->container['internal_description'] = $internal_description;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Troi\Model\ApiProjectStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Troi\Model\ApiProjectStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets is_approved
     *
     * @return bool|null
     */
    public function getIsApproved()
    {
        return $this->container['is_approved'];
    }

    /**
     * Sets is_approved
     *
     * @param bool|null $is_approved is_approved
     *
     * @return self
     */
    public function setIsApproved($is_approved)
    {
        if (is_null($is_approved)) {
            throw new \InvalidArgumentException('non-nullable is_approved cannot be null');
        }
        $this->container['is_approved'] = $is_approved;

        return $this;
    }

    /**
     * Gets project
     *
     * @return \Troi\Model\ApiProject|null
     */
    public function getProject()
    {
        return $this->container['project'];
    }

    /**
     * Sets project
     *
     * @param \Troi\Model\ApiProject|null $project project
     *
     * @return self
     */
    public function setProject($project)
    {
        if (is_null($project)) {
            throw new \InvalidArgumentException('non-nullable project cannot be null');
        }
        $this->container['project'] = $project;

        return $this;
    }

    /**
     * Gets calculation_positions
     *
     * @return \Troi\Model\ApiCalculationPosition[]|null
     */
    public function getCalculationPositions()
    {
        return $this->container['calculation_positions'];
    }

    /**
     * Sets calculation_positions
     *
     * @param \Troi\Model\ApiCalculationPosition[]|null $calculation_positions calculation_positions
     *
     * @return self
     */
    public function setCalculationPositions($calculation_positions)
    {
        if (is_null($calculation_positions)) {
            throw new \InvalidArgumentException('non-nullable calculation_positions cannot be null');
        }
        $this->container['calculation_positions'] = $calculation_positions;

        return $this;
    }

    /**
     * Gets parent
     *
     * @return \Troi\Model\ApiSubproject|null
     */
    public function getParent()
    {
        return $this->container['parent'];
    }

    /**
     * Sets parent
     *
     * @param \Troi\Model\ApiSubproject|null $parent parent
     *
     * @return self
     */
    public function setParent($parent)
    {
        if (is_null($parent)) {
            throw new \InvalidArgumentException('non-nullable parent cannot be null');
        }
        $this->container['parent'] = $parent;

        return $this;
    }

    /**
     * Gets is_leaf
     *
     * @return bool|null
     */
    public function getIsLeaf()
    {
        return $this->container['is_leaf'];
    }

    /**
     * Sets is_leaf
     *
     * @param bool|null $is_leaf is_leaf
     *
     * @return self
     */
    public function setIsLeaf($is_leaf)
    {
        if (is_null($is_leaf)) {
            throw new \InvalidArgumentException('non-nullable is_leaf cannot be null');
        }
        $this->container['is_leaf'] = $is_leaf;

        return $this;
    }

    /**
     * Gets is_printable
     *
     * @return bool|null
     */
    public function getIsPrintable()
    {
        return $this->container['is_printable'];
    }

    /**
     * Sets is_printable
     *
     * @param bool|null $is_printable is_printable
     *
     * @return self
     */
    public function setIsPrintable($is_printable)
    {
        if (is_null($is_printable)) {
            throw new \InvalidArgumentException('non-nullable is_printable cannot be null');
        }
        $this->container['is_printable'] = $is_printable;

        return $this;
    }

    /**
     * Gets order_number
     *
     * @return string|null
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param string|null $order_number order_number
     *
     * @return self
     */
    public function setOrderNumber($order_number)
    {
        if (is_null($order_number)) {
            throw new \InvalidArgumentException('non-nullable order_number cannot be null');
        }
        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets set_left
     *
     * @return string|null
     */
    public function getSetLeft()
    {
        return $this->container['set_left'];
    }

    /**
     * Sets set_left
     *
     * @param string|null $set_left set_left
     *
     * @return self
     */
    public function setSetLeft($set_left)
    {
        if (is_null($set_left)) {
            throw new \InvalidArgumentException('non-nullable set_left cannot be null');
        }
        $this->container['set_left'] = $set_left;

        return $this;
    }

    /**
     * Gets set_right
     *
     * @return string|null
     */
    public function getSetRight()
    {
        return $this->container['set_right'];
    }

    /**
     * Sets set_right
     *
     * @param string|null $set_right set_right
     *
     * @return self
     */
    public function setSetRight($set_right)
    {
        if (is_null($set_right)) {
            throw new \InvalidArgumentException('non-nullable set_right cannot be null');
        }
        $this->container['set_right'] = $set_right;

        return $this;
    }

    /**
     * Gets leader
     *
     * @return \Troi\Model\ApiEmployee|null
     */
    public function getLeader()
    {
        return $this->container['leader'];
    }

    /**
     * Sets leader
     *
     * @param \Troi\Model\ApiEmployee|null $leader leader
     *
     * @return self
     */
    public function setLeader($leader)
    {
        if (is_null($leader)) {
            throw new \InvalidArgumentException('non-nullable leader cannot be null');
        }
        $this->container['leader'] = $leader;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets modified_by
     *
     * @return string|null
     */
    public function getModifiedBy()
    {
        return $this->container['modified_by'];
    }

    /**
     * Sets modified_by
     *
     * @param string|null $modified_by modified_by
     *
     * @return self
     */
    public function setModifiedBy($modified_by)
    {
        if (is_null($modified_by)) {
            throw new \InvalidArgumentException('non-nullable modified_by cannot be null');
        }
        $this->container['modified_by'] = $modified_by;

        return $this;
    }

    /**
     * Gets deleted_by
     *
     * @return string|null
     */
    public function getDeletedBy()
    {
        return $this->container['deleted_by'];
    }

    /**
     * Sets deleted_by
     *
     * @param string|null $deleted_by deleted_by
     *
     * @return self
     */
    public function setDeletedBy($deleted_by)
    {
        if (is_null($deleted_by)) {
            throw new \InvalidArgumentException('non-nullable deleted_by cannot be null');
        }
        $this->container['deleted_by'] = $deleted_by;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets modified_at
     *
     * @return string|null
     */
    public function getModifiedAt()
    {
        return $this->container['modified_at'];
    }

    /**
     * Sets modified_at
     *
     * @param string|null $modified_at modified_at
     *
     * @return self
     */
    public function setModifiedAt($modified_at)
    {
        if (is_null($modified_at)) {
            throw new \InvalidArgumentException('non-nullable modified_at cannot be null');
        }
        $this->container['modified_at'] = $modified_at;

        return $this;
    }

    /**
     * Gets deleted_at
     *
     * @return string|null
     */
    public function getDeletedAt()
    {
        return $this->container['deleted_at'];
    }

    /**
     * Sets deleted_at
     *
     * @param string|null $deleted_at deleted_at
     *
     * @return self
     */
    public function setDeletedAt($deleted_at)
    {
        if (is_null($deleted_at)) {
            throw new \InvalidArgumentException('non-nullable deleted_at cannot be null');
        }
        $this->container['deleted_at'] = $deleted_at;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path path
     *
     * @return self
     */
    public function setPath($path)
    {
        if (is_null($path)) {
            throw new \InvalidArgumentException('non-nullable path cannot be null');
        }
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets is_deleted
     *
     * @return bool|null
     */
    public function getIsDeleted()
    {
        return $this->container['is_deleted'];
    }

    /**
     * Sets is_deleted
     *
     * @param bool|null $is_deleted is_deleted
     *
     * @return self
     */
    public function setIsDeleted($is_deleted)
    {
        if (is_null($is_deleted)) {
            throw new \InvalidArgumentException('non-nullable is_deleted cannot be null');
        }
        $this->container['is_deleted'] = $is_deleted;

        return $this;
    }

    /**
     * Gets total_subproject
     *
     * @return string|null
     */
    public function getTotalSubproject()
    {
        return $this->container['total_subproject'];
    }

    /**
     * Sets total_subproject
     *
     * @param string|null $total_subproject total_subproject
     *
     * @return self
     */
    public function setTotalSubproject($total_subproject)
    {
        if (is_null($total_subproject)) {
            throw new \InvalidArgumentException('non-nullable total_subproject cannot be null');
        }
        $this->container['total_subproject'] = $total_subproject;

        return $this;
    }

    /**
     * Gets sub_project_types
     *
     * @return \Troi\Model\ApiProjectType[]|null
     */
    public function getSubProjectTypes()
    {
        return $this->container['sub_project_types'];
    }

    /**
     * Sets sub_project_types
     *
     * @param \Troi\Model\ApiProjectType[]|null $sub_project_types sub_project_types
     *
     * @return self
     */
    public function setSubProjectTypes($sub_project_types)
    {
        if (is_null($sub_project_types)) {
            throw new \InvalidArgumentException('non-nullable sub_project_types cannot be null');
        }
        $this->container['sub_project_types'] = $sub_project_types;

        return $this;
    }

    /**
     * Gets class_name
     *
     * @return string|null
     */
    public function getClassName()
    {
        return $this->container['class_name'];
    }

    /**
     * Sets class_name
     *
     * @param string|null $class_name class_name
     *
     * @return self
     */
    public function setClassName($class_name)
    {
        if (is_null($class_name)) {
            throw new \InvalidArgumentException('non-nullable class_name cannot be null');
        }
        $this->container['class_name'] = $class_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


