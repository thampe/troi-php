<?php
/**
 * ApiProject
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Troi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Troi API
 *
 * This is the official API documentation of Troi.  # Authentication  Troi offers basic auth for authentication.  <security-definitions />
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: helpdesk@troi.de
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Troi\Model;

use \ArrayAccess;
use \Troi\ObjectSerializer;

/**
 * ApiProject Class Doc Comment
 *
 * @category Class
 * @package  Troi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ApiProject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ApiProject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'number' => 'string',
        'client' => '\Troi\Model\ApiClient',
        'customer' => '\Troi\Model\ApiCustomer',
        'external_description' => 'string',
        'internal_description' => 'string',
        'status' => '\Troi\Model\ApiProjectStatus',
        'currency' => '\Troi\Model\ApiCurrency',
        'is_approved' => 'bool',
        'is_blocked' => 'bool',
        'blocked_by' => '\Troi\Model\ApiSyncItem',
        'leader' => '\Troi\Model\ApiEmployee',
        'team' => '\Troi\Model\ApiSyncItem',
        'type_id' => 'int',
        'tax_rate_id' => 'int',
        'project_folder_id' => 'int',
        'foreign_services_cp_ip' => 'int',
        'project_types' => '\Troi\Model\ApiProjectType[]',
        'contact' => '\Troi\Model\ApiContact',
        'invoice_recipient_id' => 'int',
        'invoice_recipient_person_id' => 'int',
        'reporting_date' => 'string',
        'approved_date' => 'string',
        'created_by' => 'string',
        'modified_by' => 'string',
        'deleted_by' => 'string',
        'created_at' => 'string',
        'modified_at' => 'string',
        'deleted_at' => 'string',
        'project_issue_tracker_project_key' => 'string',
        'id' => 'int',
        'path' => 'string',
        'e_tag' => 'string',
        'is_deleted' => 'bool',
        'class_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'number' => null,
        'client' => null,
        'customer' => null,
        'external_description' => null,
        'internal_description' => null,
        'status' => null,
        'currency' => null,
        'is_approved' => null,
        'is_blocked' => null,
        'blocked_by' => null,
        'leader' => null,
        'team' => null,
        'type_id' => null,
        'tax_rate_id' => null,
        'project_folder_id' => null,
        'foreign_services_cp_ip' => null,
        'project_types' => null,
        'contact' => null,
        'invoice_recipient_id' => null,
        'invoice_recipient_person_id' => null,
        'reporting_date' => null,
        'approved_date' => null,
        'created_by' => null,
        'modified_by' => null,
        'deleted_by' => null,
        'created_at' => null,
        'modified_at' => null,
        'deleted_at' => null,
        'project_issue_tracker_project_key' => null,
        'id' => null,
        'path' => null,
        'e_tag' => null,
        'is_deleted' => null,
        'class_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'number' => false,
        'client' => false,
        'customer' => false,
        'external_description' => false,
        'internal_description' => false,
        'status' => false,
        'currency' => false,
        'is_approved' => false,
        'is_blocked' => false,
        'blocked_by' => false,
        'leader' => false,
        'team' => false,
        'type_id' => false,
        'tax_rate_id' => false,
        'project_folder_id' => false,
        'foreign_services_cp_ip' => false,
        'project_types' => false,
        'contact' => false,
        'invoice_recipient_id' => false,
        'invoice_recipient_person_id' => false,
        'reporting_date' => false,
        'approved_date' => false,
        'created_by' => false,
        'modified_by' => false,
        'deleted_by' => false,
        'created_at' => false,
        'modified_at' => false,
        'deleted_at' => false,
        'project_issue_tracker_project_key' => false,
        'id' => false,
        'path' => false,
        'e_tag' => false,
        'is_deleted' => false,
        'class_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'Name',
        'number' => 'Number',
        'client' => 'Client',
        'customer' => 'Customer',
        'external_description' => 'ExternalDescription',
        'internal_description' => 'InternalDescription',
        'status' => 'Status',
        'currency' => 'Currency',
        'is_approved' => 'IsApproved',
        'is_blocked' => 'IsBlocked',
        'blocked_by' => 'BlockedBy',
        'leader' => 'Leader',
        'team' => 'Team',
        'type_id' => 'TypeId',
        'tax_rate_id' => 'TaxRateId',
        'project_folder_id' => 'ProjectFolderId',
        'foreign_services_cp_ip' => 'ForeignServicesCpIp',
        'project_types' => 'ProjectTypes',
        'contact' => 'Contact',
        'invoice_recipient_id' => 'InvoiceRecipientId',
        'invoice_recipient_person_id' => 'InvoiceRecipientPersonId',
        'reporting_date' => 'ReportingDate',
        'approved_date' => 'ApprovedDate',
        'created_by' => 'CreatedBy',
        'modified_by' => 'ModifiedBy',
        'deleted_by' => 'DeletedBy',
        'created_at' => 'CreatedAt',
        'modified_at' => 'ModifiedAt',
        'deleted_at' => 'DeletedAt',
        'project_issue_tracker_project_key' => 'projectIssueTrackerProjectKey',
        'id' => 'Id',
        'path' => 'Path',
        'e_tag' => 'ETag',
        'is_deleted' => 'IsDeleted',
        'class_name' => 'ClassName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'number' => 'setNumber',
        'client' => 'setClient',
        'customer' => 'setCustomer',
        'external_description' => 'setExternalDescription',
        'internal_description' => 'setInternalDescription',
        'status' => 'setStatus',
        'currency' => 'setCurrency',
        'is_approved' => 'setIsApproved',
        'is_blocked' => 'setIsBlocked',
        'blocked_by' => 'setBlockedBy',
        'leader' => 'setLeader',
        'team' => 'setTeam',
        'type_id' => 'setTypeId',
        'tax_rate_id' => 'setTaxRateId',
        'project_folder_id' => 'setProjectFolderId',
        'foreign_services_cp_ip' => 'setForeignServicesCpIp',
        'project_types' => 'setProjectTypes',
        'contact' => 'setContact',
        'invoice_recipient_id' => 'setInvoiceRecipientId',
        'invoice_recipient_person_id' => 'setInvoiceRecipientPersonId',
        'reporting_date' => 'setReportingDate',
        'approved_date' => 'setApprovedDate',
        'created_by' => 'setCreatedBy',
        'modified_by' => 'setModifiedBy',
        'deleted_by' => 'setDeletedBy',
        'created_at' => 'setCreatedAt',
        'modified_at' => 'setModifiedAt',
        'deleted_at' => 'setDeletedAt',
        'project_issue_tracker_project_key' => 'setProjectIssueTrackerProjectKey',
        'id' => 'setId',
        'path' => 'setPath',
        'e_tag' => 'setETag',
        'is_deleted' => 'setIsDeleted',
        'class_name' => 'setClassName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'number' => 'getNumber',
        'client' => 'getClient',
        'customer' => 'getCustomer',
        'external_description' => 'getExternalDescription',
        'internal_description' => 'getInternalDescription',
        'status' => 'getStatus',
        'currency' => 'getCurrency',
        'is_approved' => 'getIsApproved',
        'is_blocked' => 'getIsBlocked',
        'blocked_by' => 'getBlockedBy',
        'leader' => 'getLeader',
        'team' => 'getTeam',
        'type_id' => 'getTypeId',
        'tax_rate_id' => 'getTaxRateId',
        'project_folder_id' => 'getProjectFolderId',
        'foreign_services_cp_ip' => 'getForeignServicesCpIp',
        'project_types' => 'getProjectTypes',
        'contact' => 'getContact',
        'invoice_recipient_id' => 'getInvoiceRecipientId',
        'invoice_recipient_person_id' => 'getInvoiceRecipientPersonId',
        'reporting_date' => 'getReportingDate',
        'approved_date' => 'getApprovedDate',
        'created_by' => 'getCreatedBy',
        'modified_by' => 'getModifiedBy',
        'deleted_by' => 'getDeletedBy',
        'created_at' => 'getCreatedAt',
        'modified_at' => 'getModifiedAt',
        'deleted_at' => 'getDeletedAt',
        'project_issue_tracker_project_key' => 'getProjectIssueTrackerProjectKey',
        'id' => 'getId',
        'path' => 'getPath',
        'e_tag' => 'getETag',
        'is_deleted' => 'getIsDeleted',
        'class_name' => 'getClassName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('client', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('external_description', $data ?? [], null);
        $this->setIfExists('internal_description', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('is_approved', $data ?? [], null);
        $this->setIfExists('is_blocked', $data ?? [], null);
        $this->setIfExists('blocked_by', $data ?? [], null);
        $this->setIfExists('leader', $data ?? [], null);
        $this->setIfExists('team', $data ?? [], null);
        $this->setIfExists('type_id', $data ?? [], null);
        $this->setIfExists('tax_rate_id', $data ?? [], null);
        $this->setIfExists('project_folder_id', $data ?? [], null);
        $this->setIfExists('foreign_services_cp_ip', $data ?? [], null);
        $this->setIfExists('project_types', $data ?? [], null);
        $this->setIfExists('contact', $data ?? [], null);
        $this->setIfExists('invoice_recipient_id', $data ?? [], null);
        $this->setIfExists('invoice_recipient_person_id', $data ?? [], null);
        $this->setIfExists('reporting_date', $data ?? [], null);
        $this->setIfExists('approved_date', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('modified_by', $data ?? [], null);
        $this->setIfExists('deleted_by', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('modified_at', $data ?? [], null);
        $this->setIfExists('deleted_at', $data ?? [], null);
        $this->setIfExists('project_issue_tracker_project_key', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('e_tag', $data ?? [], null);
        $this->setIfExists('is_deleted', $data ?? [], null);
        $this->setIfExists('class_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string|null $number number
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets client
     *
     * @return \Troi\Model\ApiSyncItem|null
     */
    public function getClient()
    {
        return $this->container['client'];
    }

    /**
     * Sets client
     *
     * @param \Troi\Model\ApiSyncItem|null $client client
     *
     * @return self
     */
    public function setClient($client)
    {
        if (is_null($client)) {
            throw new \InvalidArgumentException('non-nullable client cannot be null');
        }
        $this->container['client'] = $client;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \Troi\Model\ApiSyncItem|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \Troi\Model\ApiSyncItem|null $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets external_description
     *
     * @return string|null
     */
    public function getExternalDescription()
    {
        return $this->container['external_description'];
    }

    /**
     * Sets external_description
     *
     * @param string|null $external_description external_description
     *
     * @return self
     */
    public function setExternalDescription($external_description)
    {
        if (is_null($external_description)) {
            throw new \InvalidArgumentException('non-nullable external_description cannot be null');
        }
        $this->container['external_description'] = $external_description;

        return $this;
    }

    /**
     * Gets internal_description
     *
     * @return string|null
     */
    public function getInternalDescription()
    {
        return $this->container['internal_description'];
    }

    /**
     * Sets internal_description
     *
     * @param string|null $internal_description internal_description
     *
     * @return self
     */
    public function setInternalDescription($internal_description)
    {
        if (is_null($internal_description)) {
            throw new \InvalidArgumentException('non-nullable internal_description cannot be null');
        }
        $this->container['internal_description'] = $internal_description;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Troi\Model\ApiProjectStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Troi\Model\ApiProjectStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \Troi\Model\ApiCurrency|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \Troi\Model\ApiCurrency|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets is_approved
     *
     * @return bool|null
     */
    public function getIsApproved()
    {
        return $this->container['is_approved'];
    }

    /**
     * Sets is_approved
     *
     * @param bool|null $is_approved is_approved
     *
     * @return self
     */
    public function setIsApproved($is_approved)
    {
        if (is_null($is_approved)) {
            throw new \InvalidArgumentException('non-nullable is_approved cannot be null');
        }
        $this->container['is_approved'] = $is_approved;

        return $this;
    }

    /**
     * Gets is_blocked
     *
     * @return bool|null
     */
    public function getIsBlocked()
    {
        return $this->container['is_blocked'];
    }

    /**
     * Sets is_blocked
     *
     * @param bool|null $is_blocked is_blocked
     *
     * @return self
     */
    public function setIsBlocked($is_blocked)
    {
        if (is_null($is_blocked)) {
            throw new \InvalidArgumentException('non-nullable is_blocked cannot be null');
        }
        $this->container['is_blocked'] = $is_blocked;

        return $this;
    }

    /**
     * Gets blocked_by
     *
     * @return \Troi\Model\ApiSyncItem|null
     */
    public function getBlockedBy()
    {
        return $this->container['blocked_by'];
    }

    /**
     * Sets blocked_by
     *
     * @param \Troi\Model\ApiSyncItem|null $blocked_by blocked_by
     *
     * @return self
     */
    public function setBlockedBy($blocked_by)
    {
        if (is_null($blocked_by)) {
            throw new \InvalidArgumentException('non-nullable blocked_by cannot be null');
        }
        $this->container['blocked_by'] = $blocked_by;

        return $this;
    }

    /**
     * Gets leader
     *
     * @return \Troi\Model\ApiSyncItem|null
     */
    public function getLeader()
    {
        return $this->container['leader'];
    }

    /**
     * Sets leader
     *
     * @param \Troi\Model\ApiSyncItem|null $leader leader
     *
     * @return self
     */
    public function setLeader($leader)
    {
        if (is_null($leader)) {
            throw new \InvalidArgumentException('non-nullable leader cannot be null');
        }
        $this->container['leader'] = $leader;

        return $this;
    }

    /**
     * Gets team
     *
     * @return \Troi\Model\ApiSyncItem|null
     */
    public function getTeam()
    {
        return $this->container['team'];
    }

    /**
     * Sets team
     *
     * @param \Troi\Model\ApiSyncItem|null $team team
     *
     * @return self
     */
    public function setTeam($team)
    {
        if (is_null($team)) {
            throw new \InvalidArgumentException('non-nullable team cannot be null');
        }
        $this->container['team'] = $team;

        return $this;
    }

    /**
     * Gets type_id
     *
     * @return int|null
     */
    public function getTypeId()
    {
        return $this->container['type_id'];
    }

    /**
     * Sets type_id
     *
     * @param int|null $type_id type_id
     *
     * @return self
     */
    public function setTypeId($type_id)
    {
        if (is_null($type_id)) {
            throw new \InvalidArgumentException('non-nullable type_id cannot be null');
        }
        $this->container['type_id'] = $type_id;

        return $this;
    }

    /**
     * Gets tax_rate_id
     *
     * @return int|null
     */
    public function getTaxRateId()
    {
        return $this->container['tax_rate_id'];
    }

    /**
     * Sets tax_rate_id
     *
     * @param int|null $tax_rate_id tax_rate_id
     *
     * @return self
     */
    public function setTaxRateId($tax_rate_id)
    {
        if (is_null($tax_rate_id)) {
            throw new \InvalidArgumentException('non-nullable tax_rate_id cannot be null');
        }
        $this->container['tax_rate_id'] = $tax_rate_id;

        return $this;
    }

    /**
     * Gets project_folder_id
     *
     * @return int|null
     */
    public function getProjectFolderId()
    {
        return $this->container['project_folder_id'];
    }

    /**
     * Sets project_folder_id
     *
     * @param int|null $project_folder_id project_folder_id
     *
     * @return self
     */
    public function setProjectFolderId($project_folder_id)
    {
        if (is_null($project_folder_id)) {
            throw new \InvalidArgumentException('non-nullable project_folder_id cannot be null');
        }
        $this->container['project_folder_id'] = $project_folder_id;

        return $this;
    }

    /**
     * Gets foreign_services_cp_ip
     *
     * @return int|null
     */
    public function getForeignServicesCpIp()
    {
        return $this->container['foreign_services_cp_ip'];
    }

    /**
     * Sets foreign_services_cp_ip
     *
     * @param int|null $foreign_services_cp_ip foreign_services_cp_ip
     *
     * @return self
     */
    public function setForeignServicesCpIp($foreign_services_cp_ip)
    {
        if (is_null($foreign_services_cp_ip)) {
            throw new \InvalidArgumentException('non-nullable foreign_services_cp_ip cannot be null');
        }
        $this->container['foreign_services_cp_ip'] = $foreign_services_cp_ip;

        return $this;
    }

    /**
     * Gets project_types
     *
     * @return \Troi\Model\ApiProjectType[]|null
     */
    public function getProjectTypes()
    {
        return $this->container['project_types'];
    }

    /**
     * Sets project_types
     *
     * @param \Troi\Model\ApiProjectType[]|null $project_types project_types
     *
     * @return self
     */
    public function setProjectTypes($project_types)
    {
        if (is_null($project_types)) {
            throw new \InvalidArgumentException('non-nullable project_types cannot be null');
        }
        $this->container['project_types'] = $project_types;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \Troi\Model\ApiSyncItem|null
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \Troi\Model\ApiSyncItem|null $contact contact
     *
     * @return self
     */
    public function setContact($contact)
    {
        if (is_null($contact)) {
            throw new \InvalidArgumentException('non-nullable contact cannot be null');
        }
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets invoice_recipient_id
     *
     * @return int|null
     */
    public function getInvoiceRecipientId()
    {
        return $this->container['invoice_recipient_id'];
    }

    /**
     * Sets invoice_recipient_id
     *
     * @param int|null $invoice_recipient_id invoice_recipient_id
     *
     * @return self
     */
    public function setInvoiceRecipientId($invoice_recipient_id)
    {
        if (is_null($invoice_recipient_id)) {
            throw new \InvalidArgumentException('non-nullable invoice_recipient_id cannot be null');
        }
        $this->container['invoice_recipient_id'] = $invoice_recipient_id;

        return $this;
    }

    /**
     * Gets invoice_recipient_person_id
     *
     * @return int|null
     */
    public function getInvoiceRecipientPersonId()
    {
        return $this->container['invoice_recipient_person_id'];
    }

    /**
     * Sets invoice_recipient_person_id
     *
     * @param int|null $invoice_recipient_person_id invoice_recipient_person_id
     *
     * @return self
     */
    public function setInvoiceRecipientPersonId($invoice_recipient_person_id)
    {
        if (is_null($invoice_recipient_person_id)) {
            throw new \InvalidArgumentException('non-nullable invoice_recipient_person_id cannot be null');
        }
        $this->container['invoice_recipient_person_id'] = $invoice_recipient_person_id;

        return $this;
    }

    /**
     * Gets reporting_date
     *
     * @return string|null
     */
    public function getReportingDate()
    {
        return $this->container['reporting_date'];
    }

    /**
     * Sets reporting_date
     *
     * @param string|null $reporting_date reporting_date
     *
     * @return self
     */
    public function setReportingDate($reporting_date)
    {
        if (is_null($reporting_date)) {
            throw new \InvalidArgumentException('non-nullable reporting_date cannot be null');
        }
        $this->container['reporting_date'] = $reporting_date;

        return $this;
    }

    /**
     * Gets approved_date
     *
     * @return string|null
     */
    public function getApprovedDate()
    {
        return $this->container['approved_date'];
    }

    /**
     * Sets approved_date
     *
     * @param string|null $approved_date approved_date
     *
     * @return self
     */
    public function setApprovedDate($approved_date)
    {
        if (is_null($approved_date)) {
            throw new \InvalidArgumentException('non-nullable approved_date cannot be null');
        }
        $this->container['approved_date'] = $approved_date;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets modified_by
     *
     * @return string|null
     */
    public function getModifiedBy()
    {
        return $this->container['modified_by'];
    }

    /**
     * Sets modified_by
     *
     * @param string|null $modified_by modified_by
     *
     * @return self
     */
    public function setModifiedBy($modified_by)
    {
        if (is_null($modified_by)) {
            throw new \InvalidArgumentException('non-nullable modified_by cannot be null');
        }
        $this->container['modified_by'] = $modified_by;

        return $this;
    }

    /**
     * Gets deleted_by
     *
     * @return string|null
     */
    public function getDeletedBy()
    {
        return $this->container['deleted_by'];
    }

    /**
     * Sets deleted_by
     *
     * @param string|null $deleted_by deleted_by
     *
     * @return self
     */
    public function setDeletedBy($deleted_by)
    {
        if (is_null($deleted_by)) {
            throw new \InvalidArgumentException('non-nullable deleted_by cannot be null');
        }
        $this->container['deleted_by'] = $deleted_by;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets modified_at
     *
     * @return string|null
     */
    public function getModifiedAt()
    {
        return $this->container['modified_at'];
    }

    /**
     * Sets modified_at
     *
     * @param string|null $modified_at modified_at
     *
     * @return self
     */
    public function setModifiedAt($modified_at)
    {
        if (is_null($modified_at)) {
            throw new \InvalidArgumentException('non-nullable modified_at cannot be null');
        }
        $this->container['modified_at'] = $modified_at;

        return $this;
    }

    /**
     * Gets deleted_at
     *
     * @return string|null
     */
    public function getDeletedAt()
    {
        return $this->container['deleted_at'];
    }

    /**
     * Sets deleted_at
     *
     * @param string|null $deleted_at deleted_at
     *
     * @return self
     */
    public function setDeletedAt($deleted_at)
    {
        if (is_null($deleted_at)) {
            throw new \InvalidArgumentException('non-nullable deleted_at cannot be null');
        }
        $this->container['deleted_at'] = $deleted_at;

        return $this;
    }

    /**
     * Gets project_issue_tracker_project_key
     *
     * @return string|null
     */
    public function getProjectIssueTrackerProjectKey()
    {
        return $this->container['project_issue_tracker_project_key'];
    }

    /**
     * Sets project_issue_tracker_project_key
     *
     * @param string|null $project_issue_tracker_project_key project_issue_tracker_project_key
     *
     * @return self
     */
    public function setProjectIssueTrackerProjectKey($project_issue_tracker_project_key)
    {
        if (is_null($project_issue_tracker_project_key)) {
            throw new \InvalidArgumentException('non-nullable project_issue_tracker_project_key cannot be null');
        }
        $this->container['project_issue_tracker_project_key'] = $project_issue_tracker_project_key;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path path
     *
     * @return self
     */
    public function setPath($path)
    {
        if (is_null($path)) {
            throw new \InvalidArgumentException('non-nullable path cannot be null');
        }
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets e_tag
     *
     * @return string|null
     */
    public function getETag()
    {
        return $this->container['e_tag'];
    }

    /**
     * Sets e_tag
     *
     * @param string|null $e_tag e_tag
     *
     * @return self
     */
    public function setETag($e_tag)
    {
        if (is_null($e_tag)) {
            throw new \InvalidArgumentException('non-nullable e_tag cannot be null');
        }
        $this->container['e_tag'] = $e_tag;

        return $this;
    }

    /**
     * Gets is_deleted
     *
     * @return bool|null
     */
    public function getIsDeleted()
    {
        return $this->container['is_deleted'];
    }

    /**
     * Sets is_deleted
     *
     * @param bool|null $is_deleted is_deleted
     *
     * @return self
     */
    public function setIsDeleted($is_deleted)
    {
        if (is_null($is_deleted)) {
            throw new \InvalidArgumentException('non-nullable is_deleted cannot be null');
        }
        $this->container['is_deleted'] = $is_deleted;

        return $this;
    }

    /**
     * Gets class_name
     *
     * @return string|null
     */
    public function getClassName()
    {
        return $this->container['class_name'];
    }

    /**
     * Sets class_name
     *
     * @param string|null $class_name class_name
     *
     * @return self
     */
    public function setClassName($class_name)
    {
        if (is_null($class_name)) {
            throw new \InvalidArgumentException('non-nullable class_name cannot be null');
        }
        $this->container['class_name'] = $class_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


