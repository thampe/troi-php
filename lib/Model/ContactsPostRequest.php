<?php
/**
 * ContactsPostRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Troi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Troi API
 *
 * This is the official API documentation of Troi.  # Authentication  Troi offers basic auth for authentication.  <security-definitions />
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: helpdesk@troi.de
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Troi\Model;

use \ArrayAccess;
use \Troi\ObjectSerializer;

/**
 * ContactsPostRequest Class Doc Comment
 *
 * @category Class
 * @package  Troi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ContactsPostRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_contacts_post_request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'name' => 'string',
        'salutation' => 'string',
        'name1' => 'string',
        'name2' => 'string',
        'name3' => 'string',
        'categories' => '\Troi\Model\ApiContactCategory[]',
        'title' => 'string',
        'private_fax' => 'string',
        'private_mail' => 'string',
        'private_mobile' => 'string',
        'private_phone' => 'string',
        'private_web' => 'string',
        'private_address_city' => 'string',
        'private_address_country' => 'string',
        'private_address_country_iso' => 'string',
        'private_address_state' => 'string',
        'private_address_street' => 'string',
        'private_address_zip_code' => 'string',
        'birthday' => 'string',
        'position' => 'string',
        'office_phone' => 'string',
        'office_mobile' => 'string',
        'office_fax' => 'string',
        'office_mail' => 'string',
        'company_phone' => 'string',
        'company_fax' => 'string',
        'company_web' => 'string',
        'company_mail' => 'string',
        'company_address_city' => 'string',
        'company_address_country' => 'string',
        'company_address_country_iso' => 'string',
        'company_address_state' => 'string',
        'company_address_street' => 'string',
        'company_address_zip_code' => 'string',
        'remark' => 'string',
        'parent' => '\Troi\Model\ApiContact',
        'employee' => '\Troi\Model\ApiEmployee',
        'department' => '\Troi\Model\ApiContact',
        'is_favorite' => 'bool',
        'is_inactive' => 'bool',
        'external_id' => 'string',
        'access_group' => 'int',
        'created_by' => '\Troi\Model\ApiEmployee',
        'id' => 'int',
        'path' => 'string',
        'e_tag' => 'string',
        'is_deleted' => 'bool',
        'class_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'name' => null,
        'salutation' => null,
        'name1' => null,
        'name2' => null,
        'name3' => null,
        'categories' => null,
        'title' => null,
        'private_fax' => null,
        'private_mail' => null,
        'private_mobile' => null,
        'private_phone' => null,
        'private_web' => null,
        'private_address_city' => null,
        'private_address_country' => null,
        'private_address_country_iso' => null,
        'private_address_state' => null,
        'private_address_street' => null,
        'private_address_zip_code' => null,
        'birthday' => null,
        'position' => null,
        'office_phone' => null,
        'office_mobile' => null,
        'office_fax' => null,
        'office_mail' => null,
        'company_phone' => null,
        'company_fax' => null,
        'company_web' => null,
        'company_mail' => null,
        'company_address_city' => null,
        'company_address_country' => null,
        'company_address_country_iso' => null,
        'company_address_state' => null,
        'company_address_street' => null,
        'company_address_zip_code' => null,
        'remark' => null,
        'parent' => null,
        'employee' => null,
        'department' => null,
        'is_favorite' => null,
        'is_inactive' => null,
        'external_id' => null,
        'access_group' => null,
        'created_by' => null,
        'id' => null,
        'path' => null,
        'e_tag' => null,
        'is_deleted' => null,
        'class_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'type' => false,
        'name' => false,
        'salutation' => false,
        'name1' => false,
        'name2' => false,
        'name3' => false,
        'categories' => false,
        'title' => false,
        'private_fax' => false,
        'private_mail' => false,
        'private_mobile' => false,
        'private_phone' => false,
        'private_web' => false,
        'private_address_city' => false,
        'private_address_country' => false,
        'private_address_country_iso' => false,
        'private_address_state' => false,
        'private_address_street' => false,
        'private_address_zip_code' => false,
        'birthday' => false,
        'position' => false,
        'office_phone' => false,
        'office_mobile' => false,
        'office_fax' => false,
        'office_mail' => false,
        'company_phone' => false,
        'company_fax' => false,
        'company_web' => false,
        'company_mail' => false,
        'company_address_city' => false,
        'company_address_country' => false,
        'company_address_country_iso' => false,
        'company_address_state' => false,
        'company_address_street' => false,
        'company_address_zip_code' => false,
        'remark' => false,
        'parent' => false,
        'employee' => false,
        'department' => false,
        'is_favorite' => false,
        'is_inactive' => false,
        'external_id' => false,
        'access_group' => false,
        'created_by' => false,
        'id' => false,
        'path' => false,
        'e_tag' => false,
        'is_deleted' => false,
        'class_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'Type',
        'name' => 'Name',
        'salutation' => 'Salutation',
        'name1' => 'Name1',
        'name2' => 'Name2',
        'name3' => 'Name3',
        'categories' => 'Categories',
        'title' => 'Title',
        'private_fax' => 'PrivateFax',
        'private_mail' => 'PrivateMail',
        'private_mobile' => 'PrivateMobile',
        'private_phone' => 'PrivatePhone',
        'private_web' => 'PrivateWeb',
        'private_address_city' => 'PrivateAddressCity',
        'private_address_country' => 'PrivateAddressCountry',
        'private_address_country_iso' => 'PrivateAddressCountryIso',
        'private_address_state' => 'PrivateAddressState',
        'private_address_street' => 'PrivateAddressStreet',
        'private_address_zip_code' => 'PrivateAddressZipCode',
        'birthday' => 'Birthday',
        'position' => 'Position',
        'office_phone' => 'OfficePhone',
        'office_mobile' => 'OfficeMobile',
        'office_fax' => 'OfficeFax',
        'office_mail' => 'OfficeMail',
        'company_phone' => 'CompanyPhone',
        'company_fax' => 'CompanyFax',
        'company_web' => 'CompanyWeb',
        'company_mail' => 'CompanyMail',
        'company_address_city' => 'CompanyAddressCity',
        'company_address_country' => 'CompanyAddressCountry',
        'company_address_country_iso' => 'CompanyAddressCountryIso',
        'company_address_state' => 'CompanyAddressState',
        'company_address_street' => 'CompanyAddressStreet',
        'company_address_zip_code' => 'CompanyAddressZipCode',
        'remark' => 'Remark',
        'parent' => 'Parent',
        'employee' => 'Employee',
        'department' => 'Department',
        'is_favorite' => 'IsFavorite',
        'is_inactive' => 'IsInactive',
        'external_id' => 'ExternalId',
        'access_group' => 'AccessGroup',
        'created_by' => 'CreatedBy',
        'id' => 'Id',
        'path' => 'Path',
        'e_tag' => 'ETag',
        'is_deleted' => 'IsDeleted',
        'class_name' => 'ClassName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'name' => 'setName',
        'salutation' => 'setSalutation',
        'name1' => 'setName1',
        'name2' => 'setName2',
        'name3' => 'setName3',
        'categories' => 'setCategories',
        'title' => 'setTitle',
        'private_fax' => 'setPrivateFax',
        'private_mail' => 'setPrivateMail',
        'private_mobile' => 'setPrivateMobile',
        'private_phone' => 'setPrivatePhone',
        'private_web' => 'setPrivateWeb',
        'private_address_city' => 'setPrivateAddressCity',
        'private_address_country' => 'setPrivateAddressCountry',
        'private_address_country_iso' => 'setPrivateAddressCountryIso',
        'private_address_state' => 'setPrivateAddressState',
        'private_address_street' => 'setPrivateAddressStreet',
        'private_address_zip_code' => 'setPrivateAddressZipCode',
        'birthday' => 'setBirthday',
        'position' => 'setPosition',
        'office_phone' => 'setOfficePhone',
        'office_mobile' => 'setOfficeMobile',
        'office_fax' => 'setOfficeFax',
        'office_mail' => 'setOfficeMail',
        'company_phone' => 'setCompanyPhone',
        'company_fax' => 'setCompanyFax',
        'company_web' => 'setCompanyWeb',
        'company_mail' => 'setCompanyMail',
        'company_address_city' => 'setCompanyAddressCity',
        'company_address_country' => 'setCompanyAddressCountry',
        'company_address_country_iso' => 'setCompanyAddressCountryIso',
        'company_address_state' => 'setCompanyAddressState',
        'company_address_street' => 'setCompanyAddressStreet',
        'company_address_zip_code' => 'setCompanyAddressZipCode',
        'remark' => 'setRemark',
        'parent' => 'setParent',
        'employee' => 'setEmployee',
        'department' => 'setDepartment',
        'is_favorite' => 'setIsFavorite',
        'is_inactive' => 'setIsInactive',
        'external_id' => 'setExternalId',
        'access_group' => 'setAccessGroup',
        'created_by' => 'setCreatedBy',
        'id' => 'setId',
        'path' => 'setPath',
        'e_tag' => 'setETag',
        'is_deleted' => 'setIsDeleted',
        'class_name' => 'setClassName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'name' => 'getName',
        'salutation' => 'getSalutation',
        'name1' => 'getName1',
        'name2' => 'getName2',
        'name3' => 'getName3',
        'categories' => 'getCategories',
        'title' => 'getTitle',
        'private_fax' => 'getPrivateFax',
        'private_mail' => 'getPrivateMail',
        'private_mobile' => 'getPrivateMobile',
        'private_phone' => 'getPrivatePhone',
        'private_web' => 'getPrivateWeb',
        'private_address_city' => 'getPrivateAddressCity',
        'private_address_country' => 'getPrivateAddressCountry',
        'private_address_country_iso' => 'getPrivateAddressCountryIso',
        'private_address_state' => 'getPrivateAddressState',
        'private_address_street' => 'getPrivateAddressStreet',
        'private_address_zip_code' => 'getPrivateAddressZipCode',
        'birthday' => 'getBirthday',
        'position' => 'getPosition',
        'office_phone' => 'getOfficePhone',
        'office_mobile' => 'getOfficeMobile',
        'office_fax' => 'getOfficeFax',
        'office_mail' => 'getOfficeMail',
        'company_phone' => 'getCompanyPhone',
        'company_fax' => 'getCompanyFax',
        'company_web' => 'getCompanyWeb',
        'company_mail' => 'getCompanyMail',
        'company_address_city' => 'getCompanyAddressCity',
        'company_address_country' => 'getCompanyAddressCountry',
        'company_address_country_iso' => 'getCompanyAddressCountryIso',
        'company_address_state' => 'getCompanyAddressState',
        'company_address_street' => 'getCompanyAddressStreet',
        'company_address_zip_code' => 'getCompanyAddressZipCode',
        'remark' => 'getRemark',
        'parent' => 'getParent',
        'employee' => 'getEmployee',
        'department' => 'getDepartment',
        'is_favorite' => 'getIsFavorite',
        'is_inactive' => 'getIsInactive',
        'external_id' => 'getExternalId',
        'access_group' => 'getAccessGroup',
        'created_by' => 'getCreatedBy',
        'id' => 'getId',
        'path' => 'getPath',
        'e_tag' => 'getETag',
        'is_deleted' => 'getIsDeleted',
        'class_name' => 'getClassName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_PERSON = 'ApiContact:Person';
    public const TYPE_DEPARTMENT = 'ApiContact:Department';
    public const TYPE_COMPANY = 'ApiContact:Company';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_PERSON,
            self::TYPE_DEPARTMENT,
            self::TYPE_COMPANY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('salutation', $data ?? [], null);
        $this->setIfExists('name1', $data ?? [], null);
        $this->setIfExists('name2', $data ?? [], null);
        $this->setIfExists('name3', $data ?? [], null);
        $this->setIfExists('categories', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('private_fax', $data ?? [], null);
        $this->setIfExists('private_mail', $data ?? [], null);
        $this->setIfExists('private_mobile', $data ?? [], null);
        $this->setIfExists('private_phone', $data ?? [], null);
        $this->setIfExists('private_web', $data ?? [], null);
        $this->setIfExists('private_address_city', $data ?? [], null);
        $this->setIfExists('private_address_country', $data ?? [], null);
        $this->setIfExists('private_address_country_iso', $data ?? [], null);
        $this->setIfExists('private_address_state', $data ?? [], null);
        $this->setIfExists('private_address_street', $data ?? [], null);
        $this->setIfExists('private_address_zip_code', $data ?? [], null);
        $this->setIfExists('birthday', $data ?? [], null);
        $this->setIfExists('position', $data ?? [], null);
        $this->setIfExists('office_phone', $data ?? [], null);
        $this->setIfExists('office_mobile', $data ?? [], null);
        $this->setIfExists('office_fax', $data ?? [], null);
        $this->setIfExists('office_mail', $data ?? [], null);
        $this->setIfExists('company_phone', $data ?? [], null);
        $this->setIfExists('company_fax', $data ?? [], null);
        $this->setIfExists('company_web', $data ?? [], null);
        $this->setIfExists('company_mail', $data ?? [], null);
        $this->setIfExists('company_address_city', $data ?? [], null);
        $this->setIfExists('company_address_country', $data ?? [], null);
        $this->setIfExists('company_address_country_iso', $data ?? [], null);
        $this->setIfExists('company_address_state', $data ?? [], null);
        $this->setIfExists('company_address_street', $data ?? [], null);
        $this->setIfExists('company_address_zip_code', $data ?? [], null);
        $this->setIfExists('remark', $data ?? [], null);
        $this->setIfExists('parent', $data ?? [], null);
        $this->setIfExists('employee', $data ?? [], null);
        $this->setIfExists('department', $data ?? [], null);
        $this->setIfExists('is_favorite', $data ?? [], null);
        $this->setIfExists('is_inactive', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('access_group', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('path', $data ?? [], null);
        $this->setIfExists('e_tag', $data ?? [], null);
        $this->setIfExists('is_deleted', $data ?? [], null);
        $this->setIfExists('class_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['name1'] === null) {
            $invalidProperties[] = "'name1' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets salutation
     *
     * @return string|null
     */
    public function getSalutation()
    {
        return $this->container['salutation'];
    }

    /**
     * Sets salutation
     *
     * @param string|null $salutation salutation
     *
     * @return self
     */
    public function setSalutation($salutation)
    {
        if (is_null($salutation)) {
            throw new \InvalidArgumentException('non-nullable salutation cannot be null');
        }
        $this->container['salutation'] = $salutation;

        return $this;
    }

    /**
     * Gets name1
     *
     * @return string
     */
    public function getName1()
    {
        return $this->container['name1'];
    }

    /**
     * Sets name1
     *
     * @param string $name1 name1
     *
     * @return self
     */
    public function setName1($name1)
    {
        if (is_null($name1)) {
            throw new \InvalidArgumentException('non-nullable name1 cannot be null');
        }
        $this->container['name1'] = $name1;

        return $this;
    }

    /**
     * Gets name2
     *
     * @return string|null
     */
    public function getName2()
    {
        return $this->container['name2'];
    }

    /**
     * Sets name2
     *
     * @param string|null $name2 name2
     *
     * @return self
     */
    public function setName2($name2)
    {
        if (is_null($name2)) {
            throw new \InvalidArgumentException('non-nullable name2 cannot be null');
        }
        $this->container['name2'] = $name2;

        return $this;
    }

    /**
     * Gets name3
     *
     * @return string|null
     */
    public function getName3()
    {
        return $this->container['name3'];
    }

    /**
     * Sets name3
     *
     * @param string|null $name3 name3
     *
     * @return self
     */
    public function setName3($name3)
    {
        if (is_null($name3)) {
            throw new \InvalidArgumentException('non-nullable name3 cannot be null');
        }
        $this->container['name3'] = $name3;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return \Troi\Model\ApiContactCategory[]|null
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param \Troi\Model\ApiContactCategory[]|null $categories categories
     *
     * @return self
     */
    public function setCategories($categories)
    {
        if (is_null($categories)) {
            throw new \InvalidArgumentException('non-nullable categories cannot be null');
        }
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets private_fax
     *
     * @return string|null
     */
    public function getPrivateFax()
    {
        return $this->container['private_fax'];
    }

    /**
     * Sets private_fax
     *
     * @param string|null $private_fax private_fax
     *
     * @return self
     */
    public function setPrivateFax($private_fax)
    {
        if (is_null($private_fax)) {
            throw new \InvalidArgumentException('non-nullable private_fax cannot be null');
        }
        $this->container['private_fax'] = $private_fax;

        return $this;
    }

    /**
     * Gets private_mail
     *
     * @return string|null
     */
    public function getPrivateMail()
    {
        return $this->container['private_mail'];
    }

    /**
     * Sets private_mail
     *
     * @param string|null $private_mail private_mail
     *
     * @return self
     */
    public function setPrivateMail($private_mail)
    {
        if (is_null($private_mail)) {
            throw new \InvalidArgumentException('non-nullable private_mail cannot be null');
        }
        $this->container['private_mail'] = $private_mail;

        return $this;
    }

    /**
     * Gets private_mobile
     *
     * @return string|null
     */
    public function getPrivateMobile()
    {
        return $this->container['private_mobile'];
    }

    /**
     * Sets private_mobile
     *
     * @param string|null $private_mobile private_mobile
     *
     * @return self
     */
    public function setPrivateMobile($private_mobile)
    {
        if (is_null($private_mobile)) {
            throw new \InvalidArgumentException('non-nullable private_mobile cannot be null');
        }
        $this->container['private_mobile'] = $private_mobile;

        return $this;
    }

    /**
     * Gets private_phone
     *
     * @return string|null
     */
    public function getPrivatePhone()
    {
        return $this->container['private_phone'];
    }

    /**
     * Sets private_phone
     *
     * @param string|null $private_phone private_phone
     *
     * @return self
     */
    public function setPrivatePhone($private_phone)
    {
        if (is_null($private_phone)) {
            throw new \InvalidArgumentException('non-nullable private_phone cannot be null');
        }
        $this->container['private_phone'] = $private_phone;

        return $this;
    }

    /**
     * Gets private_web
     *
     * @return string|null
     */
    public function getPrivateWeb()
    {
        return $this->container['private_web'];
    }

    /**
     * Sets private_web
     *
     * @param string|null $private_web private_web
     *
     * @return self
     */
    public function setPrivateWeb($private_web)
    {
        if (is_null($private_web)) {
            throw new \InvalidArgumentException('non-nullable private_web cannot be null');
        }
        $this->container['private_web'] = $private_web;

        return $this;
    }

    /**
     * Gets private_address_city
     *
     * @return string|null
     */
    public function getPrivateAddressCity()
    {
        return $this->container['private_address_city'];
    }

    /**
     * Sets private_address_city
     *
     * @param string|null $private_address_city private_address_city
     *
     * @return self
     */
    public function setPrivateAddressCity($private_address_city)
    {
        if (is_null($private_address_city)) {
            throw new \InvalidArgumentException('non-nullable private_address_city cannot be null');
        }
        $this->container['private_address_city'] = $private_address_city;

        return $this;
    }

    /**
     * Gets private_address_country
     *
     * @return string|null
     */
    public function getPrivateAddressCountry()
    {
        return $this->container['private_address_country'];
    }

    /**
     * Sets private_address_country
     *
     * @param string|null $private_address_country private_address_country
     *
     * @return self
     */
    public function setPrivateAddressCountry($private_address_country)
    {
        if (is_null($private_address_country)) {
            throw new \InvalidArgumentException('non-nullable private_address_country cannot be null');
        }
        $this->container['private_address_country'] = $private_address_country;

        return $this;
    }

    /**
     * Gets private_address_country_iso
     *
     * @return string|null
     */
    public function getPrivateAddressCountryIso()
    {
        return $this->container['private_address_country_iso'];
    }

    /**
     * Sets private_address_country_iso
     *
     * @param string|null $private_address_country_iso private_address_country_iso
     *
     * @return self
     */
    public function setPrivateAddressCountryIso($private_address_country_iso)
    {
        if (is_null($private_address_country_iso)) {
            throw new \InvalidArgumentException('non-nullable private_address_country_iso cannot be null');
        }
        $this->container['private_address_country_iso'] = $private_address_country_iso;

        return $this;
    }

    /**
     * Gets private_address_state
     *
     * @return string|null
     */
    public function getPrivateAddressState()
    {
        return $this->container['private_address_state'];
    }

    /**
     * Sets private_address_state
     *
     * @param string|null $private_address_state private_address_state
     *
     * @return self
     */
    public function setPrivateAddressState($private_address_state)
    {
        if (is_null($private_address_state)) {
            throw new \InvalidArgumentException('non-nullable private_address_state cannot be null');
        }
        $this->container['private_address_state'] = $private_address_state;

        return $this;
    }

    /**
     * Gets private_address_street
     *
     * @return string|null
     */
    public function getPrivateAddressStreet()
    {
        return $this->container['private_address_street'];
    }

    /**
     * Sets private_address_street
     *
     * @param string|null $private_address_street private_address_street
     *
     * @return self
     */
    public function setPrivateAddressStreet($private_address_street)
    {
        if (is_null($private_address_street)) {
            throw new \InvalidArgumentException('non-nullable private_address_street cannot be null');
        }
        $this->container['private_address_street'] = $private_address_street;

        return $this;
    }

    /**
     * Gets private_address_zip_code
     *
     * @return string|null
     */
    public function getPrivateAddressZipCode()
    {
        return $this->container['private_address_zip_code'];
    }

    /**
     * Sets private_address_zip_code
     *
     * @param string|null $private_address_zip_code private_address_zip_code
     *
     * @return self
     */
    public function setPrivateAddressZipCode($private_address_zip_code)
    {
        if (is_null($private_address_zip_code)) {
            throw new \InvalidArgumentException('non-nullable private_address_zip_code cannot be null');
        }
        $this->container['private_address_zip_code'] = $private_address_zip_code;

        return $this;
    }

    /**
     * Gets birthday
     *
     * @return string|null
     */
    public function getBirthday()
    {
        return $this->container['birthday'];
    }

    /**
     * Sets birthday
     *
     * @param string|null $birthday birthday
     *
     * @return self
     */
    public function setBirthday($birthday)
    {
        if (is_null($birthday)) {
            throw new \InvalidArgumentException('non-nullable birthday cannot be null');
        }
        $this->container['birthday'] = $birthday;

        return $this;
    }

    /**
     * Gets position
     *
     * @return string|null
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param string|null $position position
     *
     * @return self
     */
    public function setPosition($position)
    {
        if (is_null($position)) {
            throw new \InvalidArgumentException('non-nullable position cannot be null');
        }
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets office_phone
     *
     * @return string|null
     */
    public function getOfficePhone()
    {
        return $this->container['office_phone'];
    }

    /**
     * Sets office_phone
     *
     * @param string|null $office_phone office_phone
     *
     * @return self
     */
    public function setOfficePhone($office_phone)
    {
        if (is_null($office_phone)) {
            throw new \InvalidArgumentException('non-nullable office_phone cannot be null');
        }
        $this->container['office_phone'] = $office_phone;

        return $this;
    }

    /**
     * Gets office_mobile
     *
     * @return string|null
     */
    public function getOfficeMobile()
    {
        return $this->container['office_mobile'];
    }

    /**
     * Sets office_mobile
     *
     * @param string|null $office_mobile office_mobile
     *
     * @return self
     */
    public function setOfficeMobile($office_mobile)
    {
        if (is_null($office_mobile)) {
            throw new \InvalidArgumentException('non-nullable office_mobile cannot be null');
        }
        $this->container['office_mobile'] = $office_mobile;

        return $this;
    }

    /**
     * Gets office_fax
     *
     * @return string|null
     */
    public function getOfficeFax()
    {
        return $this->container['office_fax'];
    }

    /**
     * Sets office_fax
     *
     * @param string|null $office_fax office_fax
     *
     * @return self
     */
    public function setOfficeFax($office_fax)
    {
        if (is_null($office_fax)) {
            throw new \InvalidArgumentException('non-nullable office_fax cannot be null');
        }
        $this->container['office_fax'] = $office_fax;

        return $this;
    }

    /**
     * Gets office_mail
     *
     * @return string|null
     */
    public function getOfficeMail()
    {
        return $this->container['office_mail'];
    }

    /**
     * Sets office_mail
     *
     * @param string|null $office_mail office_mail
     *
     * @return self
     */
    public function setOfficeMail($office_mail)
    {
        if (is_null($office_mail)) {
            throw new \InvalidArgumentException('non-nullable office_mail cannot be null');
        }
        $this->container['office_mail'] = $office_mail;

        return $this;
    }

    /**
     * Gets company_phone
     *
     * @return string|null
     */
    public function getCompanyPhone()
    {
        return $this->container['company_phone'];
    }

    /**
     * Sets company_phone
     *
     * @param string|null $company_phone company_phone
     *
     * @return self
     */
    public function setCompanyPhone($company_phone)
    {
        if (is_null($company_phone)) {
            throw new \InvalidArgumentException('non-nullable company_phone cannot be null');
        }
        $this->container['company_phone'] = $company_phone;

        return $this;
    }

    /**
     * Gets company_fax
     *
     * @return string|null
     */
    public function getCompanyFax()
    {
        return $this->container['company_fax'];
    }

    /**
     * Sets company_fax
     *
     * @param string|null $company_fax company_fax
     *
     * @return self
     */
    public function setCompanyFax($company_fax)
    {
        if (is_null($company_fax)) {
            throw new \InvalidArgumentException('non-nullable company_fax cannot be null');
        }
        $this->container['company_fax'] = $company_fax;

        return $this;
    }

    /**
     * Gets company_web
     *
     * @return string|null
     */
    public function getCompanyWeb()
    {
        return $this->container['company_web'];
    }

    /**
     * Sets company_web
     *
     * @param string|null $company_web company_web
     *
     * @return self
     */
    public function setCompanyWeb($company_web)
    {
        if (is_null($company_web)) {
            throw new \InvalidArgumentException('non-nullable company_web cannot be null');
        }
        $this->container['company_web'] = $company_web;

        return $this;
    }

    /**
     * Gets company_mail
     *
     * @return string|null
     */
    public function getCompanyMail()
    {
        return $this->container['company_mail'];
    }

    /**
     * Sets company_mail
     *
     * @param string|null $company_mail company_mail
     *
     * @return self
     */
    public function setCompanyMail($company_mail)
    {
        if (is_null($company_mail)) {
            throw new \InvalidArgumentException('non-nullable company_mail cannot be null');
        }
        $this->container['company_mail'] = $company_mail;

        return $this;
    }

    /**
     * Gets company_address_city
     *
     * @return string|null
     */
    public function getCompanyAddressCity()
    {
        return $this->container['company_address_city'];
    }

    /**
     * Sets company_address_city
     *
     * @param string|null $company_address_city company_address_city
     *
     * @return self
     */
    public function setCompanyAddressCity($company_address_city)
    {
        if (is_null($company_address_city)) {
            throw new \InvalidArgumentException('non-nullable company_address_city cannot be null');
        }
        $this->container['company_address_city'] = $company_address_city;

        return $this;
    }

    /**
     * Gets company_address_country
     *
     * @return string|null
     */
    public function getCompanyAddressCountry()
    {
        return $this->container['company_address_country'];
    }

    /**
     * Sets company_address_country
     *
     * @param string|null $company_address_country company_address_country
     *
     * @return self
     */
    public function setCompanyAddressCountry($company_address_country)
    {
        if (is_null($company_address_country)) {
            throw new \InvalidArgumentException('non-nullable company_address_country cannot be null');
        }
        $this->container['company_address_country'] = $company_address_country;

        return $this;
    }

    /**
     * Gets company_address_country_iso
     *
     * @return string|null
     */
    public function getCompanyAddressCountryIso()
    {
        return $this->container['company_address_country_iso'];
    }

    /**
     * Sets company_address_country_iso
     *
     * @param string|null $company_address_country_iso company_address_country_iso
     *
     * @return self
     */
    public function setCompanyAddressCountryIso($company_address_country_iso)
    {
        if (is_null($company_address_country_iso)) {
            throw new \InvalidArgumentException('non-nullable company_address_country_iso cannot be null');
        }
        $this->container['company_address_country_iso'] = $company_address_country_iso;

        return $this;
    }

    /**
     * Gets company_address_state
     *
     * @return string|null
     */
    public function getCompanyAddressState()
    {
        return $this->container['company_address_state'];
    }

    /**
     * Sets company_address_state
     *
     * @param string|null $company_address_state company_address_state
     *
     * @return self
     */
    public function setCompanyAddressState($company_address_state)
    {
        if (is_null($company_address_state)) {
            throw new \InvalidArgumentException('non-nullable company_address_state cannot be null');
        }
        $this->container['company_address_state'] = $company_address_state;

        return $this;
    }

    /**
     * Gets company_address_street
     *
     * @return string|null
     */
    public function getCompanyAddressStreet()
    {
        return $this->container['company_address_street'];
    }

    /**
     * Sets company_address_street
     *
     * @param string|null $company_address_street company_address_street
     *
     * @return self
     */
    public function setCompanyAddressStreet($company_address_street)
    {
        if (is_null($company_address_street)) {
            throw new \InvalidArgumentException('non-nullable company_address_street cannot be null');
        }
        $this->container['company_address_street'] = $company_address_street;

        return $this;
    }

    /**
     * Gets company_address_zip_code
     *
     * @return string|null
     */
    public function getCompanyAddressZipCode()
    {
        return $this->container['company_address_zip_code'];
    }

    /**
     * Sets company_address_zip_code
     *
     * @param string|null $company_address_zip_code company_address_zip_code
     *
     * @return self
     */
    public function setCompanyAddressZipCode($company_address_zip_code)
    {
        if (is_null($company_address_zip_code)) {
            throw new \InvalidArgumentException('non-nullable company_address_zip_code cannot be null');
        }
        $this->container['company_address_zip_code'] = $company_address_zip_code;

        return $this;
    }

    /**
     * Gets remark
     *
     * @return string|null
     */
    public function getRemark()
    {
        return $this->container['remark'];
    }

    /**
     * Sets remark
     *
     * @param string|null $remark remark
     *
     * @return self
     */
    public function setRemark($remark)
    {
        if (is_null($remark)) {
            throw new \InvalidArgumentException('non-nullable remark cannot be null');
        }
        $this->container['remark'] = $remark;

        return $this;
    }

    /**
     * Gets parent
     *
     * @return \Troi\Model\ApiContact|null
     */
    public function getParent()
    {
        return $this->container['parent'];
    }

    /**
     * Sets parent
     *
     * @param \Troi\Model\ApiContact|null $parent parent
     *
     * @return self
     */
    public function setParent($parent)
    {
        if (is_null($parent)) {
            throw new \InvalidArgumentException('non-nullable parent cannot be null');
        }
        $this->container['parent'] = $parent;

        return $this;
    }

    /**
     * Gets employee
     *
     * @return \Troi\Model\ApiEmployee|null
     */
    public function getEmployee()
    {
        return $this->container['employee'];
    }

    /**
     * Sets employee
     *
     * @param \Troi\Model\ApiEmployee|null $employee employee
     *
     * @return self
     */
    public function setEmployee($employee)
    {
        if (is_null($employee)) {
            throw new \InvalidArgumentException('non-nullable employee cannot be null');
        }
        $this->container['employee'] = $employee;

        return $this;
    }

    /**
     * Gets department
     *
     * @return \Troi\Model\ApiContact|null
     */
    public function getDepartment()
    {
        return $this->container['department'];
    }

    /**
     * Sets department
     *
     * @param \Troi\Model\ApiContact|null $department department
     *
     * @return self
     */
    public function setDepartment($department)
    {
        if (is_null($department)) {
            throw new \InvalidArgumentException('non-nullable department cannot be null');
        }
        $this->container['department'] = $department;

        return $this;
    }

    /**
     * Gets is_favorite
     *
     * @return bool|null
     */
    public function getIsFavorite()
    {
        return $this->container['is_favorite'];
    }

    /**
     * Sets is_favorite
     *
     * @param bool|null $is_favorite is_favorite
     *
     * @return self
     */
    public function setIsFavorite($is_favorite)
    {
        if (is_null($is_favorite)) {
            throw new \InvalidArgumentException('non-nullable is_favorite cannot be null');
        }
        $this->container['is_favorite'] = $is_favorite;

        return $this;
    }

    /**
     * Gets is_inactive
     *
     * @return bool|null
     */
    public function getIsInactive()
    {
        return $this->container['is_inactive'];
    }

    /**
     * Sets is_inactive
     *
     * @param bool|null $is_inactive is_inactive
     *
     * @return self
     */
    public function setIsInactive($is_inactive)
    {
        if (is_null($is_inactive)) {
            throw new \InvalidArgumentException('non-nullable is_inactive cannot be null');
        }
        $this->container['is_inactive'] = $is_inactive;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id external_id
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets access_group
     *
     * @return int|null
     */
    public function getAccessGroup()
    {
        return $this->container['access_group'];
    }

    /**
     * Sets access_group
     *
     * @param int|null $access_group access_group
     *
     * @return self
     */
    public function setAccessGroup($access_group)
    {
        if (is_null($access_group)) {
            throw new \InvalidArgumentException('non-nullable access_group cannot be null');
        }
        $this->container['access_group'] = $access_group;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \Troi\Model\ApiEmployee|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \Troi\Model\ApiEmployee|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string|null
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string|null $path path
     *
     * @return self
     */
    public function setPath($path)
    {
        if (is_null($path)) {
            throw new \InvalidArgumentException('non-nullable path cannot be null');
        }
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets e_tag
     *
     * @return string|null
     */
    public function getETag()
    {
        return $this->container['e_tag'];
    }

    /**
     * Sets e_tag
     *
     * @param string|null $e_tag e_tag
     *
     * @return self
     */
    public function setETag($e_tag)
    {
        if (is_null($e_tag)) {
            throw new \InvalidArgumentException('non-nullable e_tag cannot be null');
        }
        $this->container['e_tag'] = $e_tag;

        return $this;
    }

    /**
     * Gets is_deleted
     *
     * @return bool|null
     */
    public function getIsDeleted()
    {
        return $this->container['is_deleted'];
    }

    /**
     * Sets is_deleted
     *
     * @param bool|null $is_deleted is_deleted
     *
     * @return self
     */
    public function setIsDeleted($is_deleted)
    {
        if (is_null($is_deleted)) {
            throw new \InvalidArgumentException('non-nullable is_deleted cannot be null');
        }
        $this->container['is_deleted'] = $is_deleted;

        return $this;
    }

    /**
     * Gets class_name
     *
     * @return string|null
     */
    public function getClassName()
    {
        return $this->container['class_name'];
    }

    /**
     * Sets class_name
     *
     * @param string|null $class_name class_name
     *
     * @return self
     */
    public function setClassName($class_name)
    {
        if (is_null($class_name)) {
            throw new \InvalidArgumentException('non-nullable class_name cannot be null');
        }
        $this->container['class_name'] = $class_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


